
vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000073c  000007d0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  0000080d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e6e  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab1  00000000  00000000  00002773  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000970  00000000  00000000  00003224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000268  00000000  00000000  00003b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030f  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aa7  00000000  00000000  0000410b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000724  00000724  000007b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.flashled 00000066  0000046e  0000046e  00000502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.turn_on_led 00000016  00000696  00000696  0000072a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.turn_off_led 00000018  00000666  00000666  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Init_Switch 0000000e  000006d8  000006d8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Sampling_Switch 0000000c  000006e6  000006e6  0000077a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Init_LED 00000016  000006ac  000006ac  00000740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Locked_state_handle 00000042  000005dc  000005dc  00000670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Unlock_state_handle 00000096  000003d8  000003d8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.EngineOn_state_handle 0000002e  0000061e  0000061e  000006b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.main    00000064  000004d4  000004d4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.nrf24_send_spi 0000005e  00000538  00000538  000005cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_write 00000008  00000716  00000716  000007aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_read 00000006  0000071e  0000071e  000007b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.Init_RF_Port 00000018  0000067e  0000067e  00000712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.Init_RF 0000014a  000000c4  000000c4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.nrf24_RX_data_available 0000000c  000006f2  000006f2  00000786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.nrf24_state 000000fe  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.nrf24_start_listening 0000001a  0000064c  0000064c  000006e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.nrf24_send_message 000000cc  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.nrf24_read_message 00000046  00000596  00000596  0000062a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .data.tx_address 00000005  00800100  00000732  000007c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 35 .data.rx_address 00000005  00800105  00000737  000007cb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 36 .text.Init_SPI 0000000c  000006fe  000006fe  00000792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.SPI_MasterTransmit 0000000c  0000070a  0000070a  0000079e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  0000072c  0000072c  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  0000072e  0000072e  000007c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  00000730  00000730  000007c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    00000016  000006c2  000006c2  00000756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000004  00000728  00000728  000007bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
   8:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
   c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  10:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  14:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  18:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  1c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  20:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  24:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  28:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  2c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  30:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  34:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  38:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  3c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  40:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  44:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  48:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  4c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  50:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  54:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  58:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  5c:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  60:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>
  64:	0c 94 92 03 	jmp	0x724	; 0x724 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	00 07       	cpc	r16, r16
  6e:	32 00       	.word	0x0032	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  bc:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

00000724 <__bad_interrupt>:
 724:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.flashled:

0000046e <flashled>:
//Timeout parameter
#define HANDSHAKE_TIMEOUT 32000
#define MESSAGE_TIMEOUT 0xFFFF

void flashled(uint8_t lednum) {
	setbit(LED_PORT,lednum);
 46e:	4b b1       	in	r20, 0x0b	; 11
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <flashled+0xe>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <flashled+0xa>
 480:	cb 01       	movw	r24, r22
 482:	46 2b       	or	r20, r22
 484:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 486:	7f ef       	ldi	r23, 0xFF	; 255
 488:	24 e3       	ldi	r18, 0x34	; 52
 48a:	3c e0       	ldi	r19, 0x0C	; 12
 48c:	71 50       	subi	r23, 0x01	; 1
 48e:	20 40       	sbci	r18, 0x00	; 0
 490:	30 40       	sbci	r19, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <flashled+0x1e>
 494:	00 c0       	rjmp	.+0      	; 0x496 <flashled+0x28>
 496:	00 00       	nop
	_delay_ms(500);
	clearbit(LED_PORT,lednum);
 498:	2b b1       	in	r18, 0x0b	; 11
 49a:	98 2f       	mov	r25, r24
 49c:	90 95       	com	r25
 49e:	29 23       	and	r18, r25
 4a0:	2b b9       	out	0x0b, r18	; 11
 4a2:	4f ef       	ldi	r20, 0xFF	; 255
 4a4:	64 e3       	ldi	r22, 0x34	; 52
 4a6:	7c e0       	ldi	r23, 0x0C	; 12
 4a8:	41 50       	subi	r20, 0x01	; 1
 4aa:	60 40       	sbci	r22, 0x00	; 0
 4ac:	70 40       	sbci	r23, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <flashled+0x3a>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <flashled+0x44>
 4b2:	00 00       	nop
	_delay_ms(500);
	setbit(LED_PORT,lednum);
 4b4:	2b b1       	in	r18, 0x0b	; 11
 4b6:	82 2b       	or	r24, r18
 4b8:	8b b9       	out	0x0b, r24	; 11
 4ba:	8f ef       	ldi	r24, 0xFF	; 255
 4bc:	24 e3       	ldi	r18, 0x34	; 52
 4be:	3c e0       	ldi	r19, 0x0C	; 12
 4c0:	81 50       	subi	r24, 0x01	; 1
 4c2:	20 40       	sbci	r18, 0x00	; 0
 4c4:	30 40       	sbci	r19, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <flashled+0x52>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <flashled+0x5c>
 4ca:	00 00       	nop
	_delay_ms(500);
	clearbit(LED_PORT,lednum);
 4cc:	8b b1       	in	r24, 0x0b	; 11
 4ce:	98 23       	and	r25, r24
 4d0:	9b b9       	out	0x0b, r25	; 11
 4d2:	08 95       	ret

Disassembly of section .text.turn_on_led:

00000696 <turn_on_led>:
}

void turn_on_led (uint8_t lednum) {
	setbit(LED_PORT,lednum);
 696:	9b b1       	in	r25, 0x0b	; 11
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <turn_on_led+0xc>
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	8a 95       	dec	r24
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <turn_on_led+0x8>
 6a6:	29 2b       	or	r18, r25
 6a8:	2b b9       	out	0x0b, r18	; 11
 6aa:	08 95       	ret

Disassembly of section .text.turn_off_led:

00000666 <turn_off_led>:
}

void turn_off_led (uint8_t lednum) {
	clearbit(LED_PORT,lednum);
 666:	9b b1       	in	r25, 0x0b	; 11
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <turn_off_led+0xc>
 66e:	22 0f       	add	r18, r18
 670:	33 1f       	adc	r19, r19
 672:	8a 95       	dec	r24
 674:	e2 f7       	brpl	.-8      	; 0x66e <turn_off_led+0x8>
 676:	20 95       	com	r18
 678:	29 23       	and	r18, r25
 67a:	2b b9       	out	0x0b, r18	; 11
 67c:	08 95       	ret

Disassembly of section .text.Init_Switch:

000006d8 <Init_Switch>:
}

void Init_Switch (void) {
	clearbit(SWITCH_DATA, SWITCH);
 6d8:	8a b1       	in	r24, 0x0a	; 10
 6da:	8f 7e       	andi	r24, 0xEF	; 239
 6dc:	8a b9       	out	0x0a, r24	; 10
	setbit(SWITCH_PORT, SWITCH);
 6de:	8b b1       	in	r24, 0x0b	; 11
 6e0:	80 61       	ori	r24, 0x10	; 16
 6e2:	8b b9       	out	0x0b, r24	; 11
 6e4:	08 95       	ret

Disassembly of section .text.Sampling_Switch:

000006e6 <Sampling_Switch>:
}

uint8_t Sampling_Switch (void) {
	if (SWITCH_PIN & 1<<SWITCH) {
 6e6:	99 b1       	in	r25, 0x09	; 9
 6e8:	89 2f       	mov	r24, r25
 6ea:	80 71       	andi	r24, 0x10	; 16
 6ec:	94 fd       	sbrc	r25, 4
		return 1;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	else return 0;
}
 6f0:	08 95       	ret

Disassembly of section .text.Init_LED:

000006ac <Init_LED>:

void Init_LED (uint8_t led_num) {
	setbit(LED_DATA,led_num);
 6ac:	9a b1       	in	r25, 0x0a	; 10
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <Init_LED+0xc>
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <Init_LED+0x8>
 6bc:	29 2b       	or	r18, r25
 6be:	2a b9       	out	0x0a, r18	; 10
 6c0:	08 95       	ret

Disassembly of section .text.Locked_state_handle:

000005dc <Locked_state_handle>:
}

void Locked_state_handle (uint8_t *STATE) {
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	ec 01       	movw	r28, r24
	uint8_t message;
	while (1)
	{
		if (nrf24_RX_data_available())
 5e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <nrf24_RX_data_available>
 5e6:	88 23       	and	r24, r24
 5e8:	e1 f3       	breq	.-8      	; 0x5e2 <Locked_state_handle+0x6>
		{
			message = nrf24_read_message();
 5ea:	0e 94 cb 02 	call	0x596	; 0x596 <nrf24_read_message>
			if (message == LOCATE_VEHICLE)
 5ee:	86 3a       	cpi	r24, 0xA6	; 166
 5f0:	21 f4       	brne	.+8      	; 0x5fa <Locked_state_handle+0x1e>
			{
				flashled(LOCATE_LED);
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	0e 94 37 02 	call	0x46e	; 0x46e <flashled>
 5f8:	f4 cf       	rjmp	.-24     	; 0x5e2 <Locked_state_handle+0x6>
			}
			else if (message == UNLOCK_VEHICLE)
 5fa:	86 3c       	cpi	r24, 0xC6	; 198
 5fc:	91 f7       	brne	.-28     	; 0x5e2 <Locked_state_handle+0x6>
 5fe:	8f e6       	ldi	r24, 0x6F	; 111
 600:	97 e1       	ldi	r25, 0x17	; 23
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	f1 f7       	brne	.-4      	; 0x602 <Locked_state_handle+0x26>
 606:	00 c0       	rjmp	.+0      	; 0x608 <Locked_state_handle+0x2c>
 608:	00 00       	nop
			{
				_delay_ms(3);
				nrf24_send_message(HANDSHAKE_VEHICLE);
 60a:	86 ed       	ldi	r24, 0xD6	; 214
 60c:	0e 94 86 01 	call	0x30c	; 0x30c <nrf24_send_message>
				nrf24_start_listening();
 610:	0e 94 26 03 	call	0x64c	; 0x64c <nrf24_start_listening>
				*STATE = UNLOCK;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	88 83       	st	Y, r24
				return;
			}
			message = 0;
		}
	}
}
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

Disassembly of section .text.Unlock_state_handle:

000003d8 <Unlock_state_handle>:

void Unlock_state_handle (uint8_t *STATE) {
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	8c 01       	movw	r16, r24
	uint8_t message;
	uint16_t handshake_countdown = HANDSHAKE_TIMEOUT;
 3e2:	c0 e0       	ldi	r28, 0x00	; 0
 3e4:	dd e7       	ldi	r29, 0x7D	; 125
	while (1) 
	{
		if (nrf24_RX_data_available())
 3e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <nrf24_RX_data_available>
 3ea:	88 23       	and	r24, r24
 3ec:	71 f1       	breq	.+92     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			message = nrf24_read_message();
 3ee:	0e 94 cb 02 	call	0x596	; 0x596 <nrf24_read_message>
			if (message == HANDSHAKE_KEY)
 3f2:	86 3e       	cpi	r24, 0xE6	; 230
 3f4:	d1 f4       	brne	.+52     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3f6:	8f e6       	ldi	r24, 0x6F	; 111
 3f8:	97 e1       	ldi	r25, 0x17	; 23
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <Unlock_state_handle+0x22>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
			{
				_delay_ms(3);
				nrf24_send_message(HANDSHAKE_VEHICLE);
 402:	86 ed       	ldi	r24, 0xD6	; 214
 404:	0e 94 86 01 	call	0x30c	; 0x30c <nrf24_send_message>
				nrf24_start_listening();
 408:	0e 94 26 03 	call	0x64c	; 0x64c <nrf24_start_listening>
				handshake_countdown = HANDSHAKE_TIMEOUT;
				turn_on_led(LOCK_LED);
 40c:	83 e0       	ldi	r24, 0x03	; 3
 40e:	0e 94 4b 03 	call	0x696	; 0x696 <turn_on_led>
 412:	ef e1       	ldi	r30, 0x1F	; 31
 414:	fe e4       	ldi	r31, 0x4E	; 78
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
				_delay_ms(10);
				turn_off_led(LOCK_LED);
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 33 03 	call	0x666	; 0x666 <turn_off_led>
			if (message == HANDSHAKE_KEY)
			{
				_delay_ms(3);
				nrf24_send_message(HANDSHAKE_VEHICLE);
				nrf24_start_listening();
				handshake_countdown = HANDSHAKE_TIMEOUT;
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	dd e7       	ldi	r29, 0x7D	; 125
 428:	11 c0       	rjmp	.+34     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
				turn_on_led(LOCK_LED);
				_delay_ms(10);
				turn_off_led(LOCK_LED);
			}
			else if (message == LOCK_VEHICLE)
 42a:	86 3b       	cpi	r24, 0xB6	; 182
 42c:	79 f4       	brne	.+30     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 42e:	8f e6       	ldi	r24, 0x6F	; 111
 430:	97 e1       	ldi	r25, 0x17	; 23
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			{
				_delay_ms(3);
				nrf24_send_message(HANDSHAKE_VEHICLE);
 43a:	86 ed       	ldi	r24, 0xD6	; 214
 43c:	0e 94 86 01 	call	0x30c	; 0x30c <nrf24_send_message>
				nrf24_start_listening();
 440:	0e 94 26 03 	call	0x64c	; 0x64c <nrf24_start_listening>
				*STATE = LOCKED;
 444:	f8 01       	movw	r30, r16
 446:	10 82       	st	Z, r1
				return;	
 448:	0d c0       	rjmp	.+26     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			}
			message = 0;
		}
		else
		{
			handshake_countdown = handshake_countdown - 1;
 44a:	21 97       	sbiw	r28, 0x01	; 1
		}
		if (handshake_countdown == 0) {
 44c:	20 97       	sbiw	r28, 0x00	; 0
 44e:	19 f4       	brne	.+6      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			*STATE = LOCKED;
 450:	f8 01       	movw	r30, r16
 452:	10 82       	st	Z, r1
			return;
 454:	07 c0       	rjmp	.+14     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 456:	8b e2       	ldi	r24, 0x2B	; 43
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 460:	00 00       	nop
 462:	c1 cf       	rjmp	.-126    	; 0x3e6 <Unlock_state_handle+0xe>
		}
		_delay_us(150);
	}
	*STATE = ENGINE_ON;
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

Disassembly of section .text.EngineOn_state_handle:

0000061e <EngineOn_state_handle>:

void EngineOn_state_handle(uint8_t *STATE)
{
 61e:	cf 93       	push	r28
 620:	df 93       	push	r29
 622:	ec 01       	movw	r28, r24
	uint8_t message;
	uint8_t lock_request;
	uint16_t handshake_countdown = HANDSHAKE_TIMEOUT;
	while (Sampling_Switch()==1)
 624:	0b c0       	rjmp	.+22     	; 0x63c <EngineOn_state_handle+0x1e>
	{
		if (nrf24_RX_data_available())
 626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <nrf24_RX_data_available>
 62a:	81 11       	cpse	r24, r1
		{
			message = nrf24_read_message();
 62c:	0e 94 cb 02 	call	0x596	; 0x596 <nrf24_read_message>
 630:	8b e2       	ldi	r24, 0x2B	; 43
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <EngineOn_state_handle+0x16>
 638:	00 c0       	rjmp	.+0      	; 0x63a <EngineOn_state_handle+0x1c>
 63a:	00 00       	nop
void EngineOn_state_handle(uint8_t *STATE)
{
	uint8_t message;
	uint8_t lock_request;
	uint16_t handshake_countdown = HANDSHAKE_TIMEOUT;
	while (Sampling_Switch()==1)
 63c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <Sampling_Switch>
 640:	81 30       	cpi	r24, 0x01	; 1
 642:	89 f3       	breq	.-30     	; 0x626 <EngineOn_state_handle+0x8>
			lock_request = 1;
		}
		_delay_us(150);
	}
	if (lock_request == 1) {
		*STATE = LOCKED;
 644:	18 82       	st	Y, r1
	}
	else *STATE = UNLOCK;
}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

Disassembly of section .text.main:

000004d4 <main>:
int main(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	0f 92       	push	r0
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
	uint8_t STATE = LOCKED;
 4de:	19 82       	std	Y+1, r1	; 0x01
	cli();
 4e0:	f8 94       	cli
	Init_SPI();
 4e2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Init_SPI>
	Init_Switch();
 4e6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Init_Switch>
	Init_LED(LOCATE_LED);
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <Init_LED>
	Init_LED(LOCK_LED);
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	0e 94 56 03 	call	0x6ac	; 0x6ac <Init_LED>
	Init_RF();
 4f6:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	nrf24_state(POWERUP);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 07 01 	call	0x20e	; 0x20e <nrf24_state>
	nrf24_start_listening();
 500:	0e 94 26 03 	call	0x64c	; 0x64c <nrf24_start_listening>
	while(1) 
	{
		if (STATE == LOCKED) {
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	81 11       	cpse	r24, r1
 508:	08 c0       	rjmp	.+16     	; 0x51a <main+0x46>
			turn_on_led(LOCK_LED);
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	0e 94 4b 03 	call	0x696	; 0x696 <turn_on_led>
			Locked_state_handle(&STATE);
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Locked_state_handle>
 518:	f5 cf       	rjmp	.-22     	; 0x504 <main+0x30>
		}
		else if (STATE == UNLOCK) {
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	41 f4       	brne	.+16     	; 0x52e <main+0x5a>
			turn_off_led(LOCK_LED);
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	0e 94 33 03 	call	0x666	; 0x666 <turn_off_led>
			Unlock_state_handle(&STATE);
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Unlock_state_handle>
 52c:	eb cf       	rjmp	.-42     	; 0x504 <main+0x30>
		}
		else 
		{
			EngineOn_state_handle(&STATE);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 0f 03 	call	0x61e	; 0x61e <EngineOn_state_handle>
 536:	e6 cf       	rjmp	.-52     	; 0x504 <main+0x30>

Disassembly of section .text.nrf24_send_spi:

00000538 <nrf24_send_spi>:
#define STANDBY2	6

// Used to store SPI commands

uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
 538:	bf 92       	push	r11
 53a:	cf 92       	push	r12
 53c:	df 92       	push	r13
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	cf 93       	push	r28
 548:	df 93       	push	r29
 54a:	6b 01       	movw	r12, r22
 54c:	7a 01       	movw	r14, r20
	uint8_t status;
	clearbit(RF_PORT,SS);
 54e:	95 b1       	in	r25, 0x05	; 5
 550:	9b 7f       	andi	r25, 0xFB	; 251
 552:	95 b9       	out	0x05, r25	; 5
	status = SPI_MasterTransmit(register_address);
 554:	0e 94 85 03 	call	0x70a	; 0x70a <SPI_MasterTransmit>
 558:	b8 2e       	mov	r11, r24
	for (unsigned int i = 0; i < bytes; i++)
 55a:	c0 e0       	ldi	r28, 0x00	; 0
 55c:	d0 e0       	ldi	r29, 0x00	; 0
 55e:	0a c0       	rjmp	.+20     	; 0x574 <nrf24_send_spi+0x3c>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
 560:	86 01       	movw	r16, r12
 562:	0c 0f       	add	r16, r28
 564:	1d 1f       	adc	r17, r29
 566:	f8 01       	movw	r30, r16
 568:	80 81       	ld	r24, Z
 56a:	0e 94 85 03 	call	0x70a	; 0x70a <SPI_MasterTransmit>
 56e:	f8 01       	movw	r30, r16
 570:	80 83       	st	Z, r24
uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
	uint8_t status;
	clearbit(RF_PORT,SS);
	status = SPI_MasterTransmit(register_address);
	for (unsigned int i = 0; i < bytes; i++)
 572:	21 96       	adiw	r28, 0x01	; 1
 574:	ce 15       	cp	r28, r14
 576:	df 05       	cpc	r29, r15
 578:	98 f3       	brcs	.-26     	; 0x560 <nrf24_send_spi+0x28>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
	setbit(RF_PORT,SS);
 57a:	85 b1       	in	r24, 0x05	; 5
 57c:	84 60       	ori	r24, 0x04	; 4
 57e:	85 b9       	out	0x05, r24	; 5
	return status;
}
 580:	8b 2d       	mov	r24, r11
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	df 90       	pop	r13
 590:	cf 90       	pop	r12
 592:	bf 90       	pop	r11
 594:	08 95       	ret

Disassembly of section .text.nrf24_write:

00000716 <nrf24_write>:

uint8_t nrf24_write(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(W_REGISTER | register_address, data, bytes);
 716:	80 62       	ori	r24, 0x20	; 32
 718:	0e 94 9c 02 	call	0x538	; 0x538 <nrf24_send_spi>
}
 71c:	08 95       	ret

Disassembly of section .text.nrf24_read:

0000071e <nrf24_read>:

uint8_t nrf24_read(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(R_REGISTER | register_address, data, bytes);
 71e:	0e 94 9c 02 	call	0x538	; 0x538 <nrf24_send_spi>
}
 722:	08 95       	ret

Disassembly of section .text.Init_RF_Port:

0000067e <Init_RF_Port>:

void Init_RF_Port(void)
{
	//setup port
	DDRB |= (1<<SS)|(1<<CE);
 67e:	84 b1       	in	r24, 0x04	; 4
 680:	85 60       	ori	r24, 0x05	; 5
 682:	84 b9       	out	0x04, r24	; 4
	clearbit(DDRB,IQR);
 684:	84 b1       	in	r24, 0x04	; 4
 686:	8d 7f       	andi	r24, 0xFD	; 253
 688:	84 b9       	out	0x04, r24	; 4
	clearbit(PORTB,CE);
 68a:	85 b1       	in	r24, 0x05	; 5
 68c:	8e 7f       	andi	r24, 0xFE	; 254
 68e:	85 b9       	out	0x05, r24	; 5
	RF_PORT = (1<<IQR)|(1<<SS);
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	85 b9       	out	0x05, r24	; 5
 694:	08 95       	ret

Disassembly of section .text.Init_RF:

000000c4 <Init_RF>:
}

void Init_RF (void)
{
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	0f 92       	push	r0
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	Init_RF_Port();
  d2:	0e 94 3f 03 	call	0x67e	; 0x67e <Init_RF_Port>
	
	setbit(RF_PORT,SS);
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	85 b9       	out	0x05, r24	; 5
	clearbit(RF_PORT,CE);
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Init_RF+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Init_RF+0x2e>
  f2:	00 00       	nop
	_delay_ms(100);		//startup wait
	
	//activate reg
	data = 0x73;
  f4:	83 e7       	ldi	r24, 0x73	; 115
  f6:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(ACTIVATE,&data,1);
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	be 01       	movw	r22, r28
  fe:	6f 5f       	subi	r22, 0xFF	; 255
 100:	7f 4f       	sbci	r23, 0xFF	; 255
 102:	80 e5       	ldi	r24, 0x50	; 80
 104:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Start nRF24L01+ config
	data =
 108:	89 e3       	ldi	r24, 0x39	; 57
 10a:	89 83       	std	Y+1, r24	; 0x01
	(!(RT_INTERRUPT) << MASK_MAX_RT) |	// IRQ interrupt on auto retransmit counter overflow (0 = enabled)
	(1 << EN_CRC) |						// CRC enable
	(0 << CRC0) |						// CRC scheme
	(0 << PWR_UP) |						// Power up
	(1 << PRIM_RX);						// RX select at start
	nrf24_write(CONFIG,&data,1);
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Auto-acknowledge on all pipes
	data =
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	89 83       	std	Y+1, r24	; 0x01
	(AUTO_ACK << ENAA_P4) |
	(AUTO_ACK << ENAA_P3) |
	(AUTO_ACK << ENAA_P2) |
	(AUTO_ACK << ENAA_P1) |
	(AUTO_ACK << ENAA_P0);
	nrf24_write(EN_AA,&data,1);
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Set retries
	data = 0x0A;				// Delay 250us with 5 re-try (will be added in settings)
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(SETUP_RETR,&data,1);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Disable RX addresses
	data = 0;
 144:	19 82       	std	Y+1, r1	; 0x01
	nrf24_write(EN_RXADDR, &data, 1);
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Set channel
	data = CHANNEL;
 156:	16 e0       	ldi	r17, 0x06	; 6
 158:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(RF_CH,&data,1);
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Setup
	data =
 16a:	19 83       	std	Y+1, r17	; 0x01
	(0 << CONT_WAVE) |					// Continuous carrier transmit
	(DATARATE) |	// Data rate
	(POWER);				// PA level
	nrf24_write(RF_SETUP,&data,1);
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	be 01       	movw	r22, r28
 172:	6f 5f       	subi	r22, 0xFF	; 255
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Status - clear TX/RX FIFO's and MAX_RT by writing 1 into them
	data =
 17c:	00 e7       	ldi	r16, 0x70	; 112
 17e:	09 83       	std	Y+1, r16	; 0x01
	(1 << RX_DR) |								// RX FIFO
	(1 << TX_DS) |								// TX FIFO
	(1 << MAX_RT);								// MAX RT
	nrf24_write(STATUS,&data,1);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	//specify data length
	data = DATA_LENGTH;
 190:	11 e0       	ldi	r17, 0x01	; 1
 192:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(RX_PW_P0,&data,1);
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	81 e1       	ldi	r24, 0x11	; 17
 1a0:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	//specify address length
	data = ADDR_LENGTH;
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(SETUP_AW,&data,1);
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Flush TX/RX
	// Clear RX FIFO which will reset interrupt
	data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 1b6:	09 83       	std	Y+1, r16	; 0x01
	nrf24_write(FLUSH_RX,0,0);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	82 ee       	ldi	r24, 0xE2	; 226
 1c2:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	81 ee       	ldi	r24, 0xE1	; 225
 1d0:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Open pipes
	nrf24_write(RX_ADDR_P0 + READ_PIPE,rx_address,5);
 1d4:	45 e0       	ldi	r20, 0x05	; 5
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	nrf24_write(TX_ADDR,tx_address,5);
 1e2:	45 e0       	ldi	r20, 0x05	; 5
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	data = (1 << READ_PIPE);
 1f0:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(EN_RXADDR,&data,1);
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	be 01       	movw	r22, r28
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	return;
}
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

Disassembly of section .text.nrf24_RX_data_available:

000006f2 <nrf24_RX_data_available>:

uint8_t nrf24_RX_data_available(void)
{
	if ((RF_PIN & 1<<IQR) == 0) return 1;
 6f2:	19 99       	sbic	0x03, 1	; 3
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <nrf24_RX_data_available+0x8>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	08 95       	ret
	return 0;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
}
 6fc:	08 95       	ret

Disassembly of section .text.nrf24_state:

0000020e <nrf24_state>:

void nrf24_state(uint8_t state)
{
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <nrf24_state+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	18 2f       	mov	r17, r24
	uint8_t data;
	uint8_t config_register;
	nrf24_read(CONFIG,&config_register,1);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	be 01       	movw	r22, r28
 222:	6e 5f       	subi	r22, 0xFE	; 254
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 8f 03 	call	0x71e	; 0x71e <nrf24_read>
	
	switch (state)
 22c:	13 30       	cpi	r17, 0x03	; 3
 22e:	71 f1       	breq	.+92     	; 0x28c <nrf24_state+0x7e>
 230:	28 f4       	brcc	.+10     	; 0x23c <nrf24_state+0x2e>
 232:	11 30       	cpi	r17, 0x01	; 1
 234:	59 f0       	breq	.+22     	; 0x24c <nrf24_state+0x3e>
 236:	12 30       	cpi	r17, 0x02	; 2
 238:	e9 f0       	breq	.+58     	; 0x274 <nrf24_state+0x66>
 23a:	62 c0       	rjmp	.+196    	; 0x300 <nrf24_state+0xf2>
 23c:	15 30       	cpi	r17, 0x05	; 5
 23e:	09 f4       	brne	.+2      	; 0x242 <nrf24_state+0x34>
 240:	47 c0       	rjmp	.+142    	; 0x2d0 <nrf24_state+0xc2>
 242:	d0 f1       	brcs	.+116    	; 0x2b8 <nrf24_state+0xaa>
 244:	16 30       	cpi	r17, 0x06	; 6
 246:	09 f4       	brne	.+2      	; 0x24a <nrf24_state+0x3c>
 248:	47 c0       	rjmp	.+142    	; 0x2d8 <nrf24_state+0xca>
 24a:	5a c0       	rjmp	.+180    	; 0x300 <nrf24_state+0xf2>
	{
		case POWERUP:
		// Check if already powered up
		if (!(config_register & (1 << PWR_UP)))
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	81 fd       	sbrc	r24, 1
 250:	57 c0       	rjmp	.+174    	; 0x300 <nrf24_state+0xf2>
		{
			data = config_register | (1 << PWR_UP);
 252:	82 60       	ori	r24, 0x02	; 2
 254:	89 83       	std	Y+1, r24	; 0x01
			nrf24_write(CONFIG,&data,1);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <nrf24_state+0x5c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <nrf24_state+0x62>
 270:	00 00       	nop
 272:	46 c0       	rjmp	.+140    	; 0x300 <nrf24_state+0xf2>
			// 1.5ms from POWERDOWN to start up
			_delay_ms(2);
		}
		break;
		case POWERDOWN:
		data = config_register & ~(1 << PWR_UP);
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		break;
 28a:	3a c0       	rjmp	.+116    	; 0x300 <nrf24_state+0xf2>
		case RECEIVE:
		data = config_register | (1 << PRIM_RX);
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		// Clear STATUS register
		data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 2a2:	80 e7       	ldi	r24, 0x70	; 112
 2a4:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(STATUS,&data,1);
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		break;
 2b6:	24 c0       	rjmp	.+72     	; 0x300 <nrf24_state+0xf2>
		case TRANSMIT:
		data = config_register & ~(1 << PRIM_RX);
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	be 01       	movw	r22, r28
 2c4:	6f 5f       	subi	r22, 0xFF	; 255
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		break;
 2ce:	18 c0       	rjmp	.+48     	; 0x300 <nrf24_state+0xf2>
		case STANDBY1:
		clearbit(RF_PORT,CE);
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	85 b9       	out	0x05, r24	; 5
		break;
 2d6:	14 c0       	rjmp	.+40     	; 0x300 <nrf24_state+0xf2>
		case STANDBY2:
		data = config_register & ~(1 << PRIM_RX);
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		setbit(RF_PORT,CE);
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f4:	8b e2       	ldi	r24, 0x2B	; 43
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <nrf24_state+0xea>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <nrf24_state+0xf0>
 2fe:	00 00       	nop
		_delay_us(150);
		break;
	}
}
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	08 95       	ret

Disassembly of section .text.nrf24_start_listening:

0000064c <nrf24_start_listening>:

void nrf24_start_listening(void)
{
	nrf24_state(RECEIVE);				// Receive mode
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	0e 94 07 01 	call	0x20e	; 0x20e <nrf24_state>
	setbit(RF_PORT,CE);
 652:	85 b1       	in	r24, 0x05	; 5
 654:	81 60       	ori	r24, 0x01	; 1
 656:	85 b9       	out	0x05, r24	; 5
 658:	8b e2       	ldi	r24, 0x2B	; 43
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	01 97       	sbiw	r24, 0x01	; 1
 65e:	f1 f7       	brne	.-4      	; 0x65c <nrf24_start_listening+0x10>
 660:	00 c0       	rjmp	.+0      	; 0x662 <nrf24_start_listening+0x16>
 662:	00 00       	nop
 664:	08 95       	ret

Disassembly of section .text.nrf24_send_message:

0000030c <nrf24_send_message>:
	_delay_us(150);						// Settling time
}

uint8_t nrf24_send_message(uint8_t message)
{
 30c:	0f 93       	push	r16
 30e:	1f 93       	push	r17
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	18 2f       	mov	r17, r24
	clearbit(RF_PORT,CE);
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	85 b9       	out	0x05, r24	; 5
	uint8_t data;
	// Flush TX/RX and clear TX interrupt
	nrf24_write(FLUSH_RX,0,0);
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	82 ee       	ldi	r24, 0xE2	; 226
 32c:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	81 ee       	ldi	r24, 0xE1	; 225
 33a:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	data = (1 << TX_DS)|(1<<MAX_RT);
 33e:	80 e3       	ldi	r24, 0x30	; 48
 340:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	be 01       	movw	r22, r28
 348:	6f 5f       	subi	r22, 0xFF	; 255
 34a:	7f 4f       	sbci	r23, 0xFF	; 255
 34c:	87 e0       	ldi	r24, 0x07	; 7
 34e:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	
	// Start SPI, load message into TX_PAYLOAD
	clearbit(RF_PORT,SS);
 352:	85 b1       	in	r24, 0x05	; 5
 354:	8b 7f       	andi	r24, 0xFB	; 251
 356:	85 b9       	out	0x05, r24	; 5
	if (AUTO_ACK) SPI_MasterTransmit(W_TX_PAYLOAD);
 358:	80 ea       	ldi	r24, 0xA0	; 160
 35a:	0e 94 85 03 	call	0x70a	; 0x70a <SPI_MasterTransmit>
	else SPI_MasterTransmit(W_TX_PAYLOAD_NOACK);
	SPI_MasterTransmit(message);
 35e:	81 2f       	mov	r24, r17
 360:	0e 94 85 03 	call	0x70a	; 0x70a <SPI_MasterTransmit>
	setbit(RF_PORT,SS);
 364:	85 b1       	in	r24, 0x05	; 5
 366:	84 60       	ori	r24, 0x04	; 4
 368:	85 b9       	out	0x05, r24	; 5
	
	// Transmit mode
	nrf24_state(TRANSMIT);
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	0e 94 07 01 	call	0x20e	; 0x20e <nrf24_state>
	
	// Send message by pulling CE high for more than 10us
	setbit(RF_PORT,CE);
 370:	85 b1       	in	r24, 0x05	; 5
 372:	81 60       	ori	r24, 0x01	; 1
 374:	85 b9       	out	0x05, r24	; 5
 376:	85 e3       	ldi	r24, 0x35	; 53
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <nrf24_send_message+0x6c>
 37c:	00 00       	nop
	_delay_us(20);
	clearbit(RF_PORT,CE);
 37e:	85 b1       	in	r24, 0x05	; 5
 380:	8e 7f       	andi	r24, 0xFE	; 254
 382:	85 b9       	out	0x05, r24	; 5
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
	uint8_t finish_send = 0;
 384:	10 e0       	ldi	r17, 0x00	; 0
	setbit(RF_PORT,CE);
	_delay_us(20);
	clearbit(RF_PORT,CE);
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
 386:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t finish_send = 0;
	while(finish_send == 0)
 388:	14 c0       	rjmp	.+40     	; 0x3b2 <nrf24_send_message+0xa6>
	{
		nrf24_read(STATUS,&data,1);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	be 01       	movw	r22, r28
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	87 e0       	ldi	r24, 0x07	; 7
 396:	0e 94 8f 03 	call	0x71e	; 0x71e <nrf24_read>
		if (data & (1 << TX_DS)) {
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	85 fd       	sbrc	r24, 5
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <nrf24_send_message+0x9e>
			SEND_SUSCESS = 1;
			finish_send = 1;
		}
			
		else if (data & (1 << MAX_RT)) {
 3a0:	84 ff       	sbrs	r24, 4
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <nrf24_send_message+0xa4>
			SEND_SUSCESS = 0;
			finish_send = 1;
 3a4:	11 e0       	ldi	r17, 0x01	; 1
			SEND_SUSCESS = 1;
			finish_send = 1;
		}
			
		else if (data & (1 << MAX_RT)) {
			SEND_SUSCESS = 0;
 3a6:	00 e0       	ldi	r16, 0x00	; 0
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <nrf24_send_message+0xa6>
	while(finish_send == 0)
	{
		nrf24_read(STATUS,&data,1);
		if (data & (1 << TX_DS)) {
			SEND_SUSCESS = 1;
			finish_send = 1;
 3aa:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t finish_send = 0;
	while(finish_send == 0)
	{
		nrf24_read(STATUS,&data,1);
		if (data & (1 << TX_DS)) {
			SEND_SUSCESS = 1;
 3ac:	01 e0       	ldi	r16, 0x01	; 1
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <nrf24_send_message+0xa6>
		else if (data & (1 << MAX_RT)) {
			SEND_SUSCESS = 0;
			finish_send = 1;
		}
		else {
			SEND_SUSCESS = 0;
 3b0:	00 e0       	ldi	r16, 0x00	; 0
	clearbit(RF_PORT,CE);
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
	uint8_t finish_send = 0;
	while(finish_send == 0)
 3b2:	11 23       	and	r17, r17
 3b4:	51 f3       	breq	.-44     	; 0x38a <nrf24_send_message+0x7e>
			finish_send = 0;
		}
	}
	
	//Clear TX interrupt
	data = (1 << TX_DS)|(1<<MAX_RT);
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	be 01       	movw	r22, r28
 3c0:	6f 5f       	subi	r22, 0xFF	; 255
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
		
	return SEND_SUSCESS;

}
 3ca:	80 2f       	mov	r24, r16
 3cc:	0f 90       	pop	r0
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

Disassembly of section .text.nrf24_read_message:

00000596 <nrf24_read_message>:

uint8_t nrf24_read_message()
{
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	00 d0       	rcall	.+0      	; 0x59c <nrf24_read_message+0x6>
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	uint8_t rx_message;
	// Read message
	clearbit(RF_PORT,CE);
 5a0:	85 b1       	in	r24, 0x05	; 5
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	85 b9       	out	0x05, r24	; 5
	nrf24_send_spi(R_RX_PAYLOAD,&rx_message,1);
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	be 01       	movw	r22, r28
 5ac:	6e 5f       	subi	r22, 0xFE	; 254
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	81 e6       	ldi	r24, 0x61	; 97
 5b2:	0e 94 9c 02 	call	0x538	; 0x538 <nrf24_send_spi>
	data = (1 << RX_DR);
 5b6:	80 e4       	ldi	r24, 0x40	; 64
 5b8:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	be 01       	movw	r22, r28
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	87 e0       	ldi	r24, 0x07	; 7
 5c6:	0e 94 8b 03 	call	0x716	; 0x716 <nrf24_write>
	//nrf24_write(FLUSH_RX,0,0);
	setbit(RF_PORT,CE);
 5ca:	85 b1       	in	r24, 0x05	; 5
 5cc:	81 60       	ori	r24, 0x01	; 1
 5ce:	85 b9       	out	0x05, r24	; 5
	return rx_message;
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	08 95       	ret

Disassembly of section .text.Init_SPI:

000006fe <Init_SPI>:
#define MOSI 3
#define MISO 4
#define SCK 5
void Init_SPI (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK); //SCK, MOSI as output
 6fe:	84 b1       	in	r24, 0x04	; 4
 700:	88 62       	ori	r24, 0x28	; 40
 702:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fclk/2 = 4MHz
 704:	81 e5       	ldi	r24, 0x51	; 81
 706:	8c bd       	out	0x2c, r24	; 44
 708:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

0000070a <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t transmit_data)
{
	SPDR = transmit_data;
 70a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) {}
 70c:	0d b4       	in	r0, 0x2d	; 45
 70e:	07 fe       	sbrs	r0, 7
 710:	fd cf       	rjmp	.-6      	; 0x70c <SPI_MasterTransmit+0x2>
	return SPDR;	//take receive data
 712:	8e b5       	in	r24, 0x2e	; 46
 714:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000072c <_fini>:
 72c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000072e <__funcs_on_exit>:
 72e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000730 <__simulator_exit>:
 730:	08 95       	ret

Disassembly of section .text.exit:

000006c2 <exit>:
 6c2:	ec 01       	movw	r28, r24
 6c4:	0e 94 97 03 	call	0x72e	; 0x72e <__funcs_on_exit>
 6c8:	0e 94 96 03 	call	0x72c	; 0x72c <_fini>
 6cc:	ce 01       	movw	r24, r28
 6ce:	0e 94 98 03 	call	0x730	; 0x730 <__simulator_exit>
 6d2:	ce 01       	movw	r24, r28
 6d4:	0e 94 94 03 	call	0x728	; 0x728 <_Exit>

Disassembly of section .text._Exit:

00000728 <_Exit>:
 728:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
