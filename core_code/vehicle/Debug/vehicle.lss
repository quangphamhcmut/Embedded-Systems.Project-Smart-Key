
vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000890  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000890  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002075  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad6  00000000  00000000  00002a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a93  00000000  00000000  0000354b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030d  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b83  00000000  00000000  00004585  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00005108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000007c4  000007c4  00000878  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000051d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.Change_Code 00000022  000006b8  000006b8  0000076c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.flashled 00000066  00000538  00000538  000005ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.turn_on_led 00000016  00000724  00000724  000007d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.turn_off_led 00000018  000006f4  000006f4  000007a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Init_MainSwitch 0000000e  00000778  00000778  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Sampling_MainSwitch 0000000c  00000786  00000786  0000083a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.Init_LED 00000016  0000073a  0000073a  000007ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Locked_state_handle 00000052  000005fc  000005fc  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.Unlock_state_handle 000000e8  00000310  00000310  000003c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    00000074  000004c4  000004c4  00000578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.nrf24_send_spi 0000005e  0000059e  0000059e  00000652  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.nrf24_write 00000008  000007b6  000007b6  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.nrf24_read 00000006  000007be  000007be  00000872  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.Init_RF_Port 00000018  0000070c  0000070c  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.Init_RF 0000014a  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.nrf24_RX_data_available 0000000c  00000792  00000792  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.nrf24_state 000000fe  00000212  00000212  000002c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.nrf24_start_listening 0000001a  000006da  000006da  0000078e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.nrf24_send_message 000000cc  000003f8  000003f8  000004ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.nrf24_read_message 00000046  0000064e  0000064e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.nrf24_RX_power 00000024  00000694  00000694  00000748  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .data.tx_address 00000005  00800103  000007d2  00000886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 37 .data.rx_address 00000005  00800108  000007d7  0000088b  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 38 .text.Init_SPI 0000000c  0000079e  0000079e  00000852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.SPI_MasterTransmit 0000000c  000007aa  000007aa  0000085e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_fini 00000002  000007cc  000007cc  00000880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_funcs_on_exit 00000002  000007ce  000007ce  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__dummy_simulator_exit 00000002  000007d0  000007d0  00000884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.exit    00000016  00000750  00000750  00000804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text._Exit   00000004  000007c8  000007c8  0000087c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 00000012  00000766  00000766  0000081a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
   8:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
   c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  10:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  14:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  18:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  1c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  20:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  24:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  28:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  2c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  30:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  34:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  38:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  3c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  40:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  44:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  48:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  4c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  50:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  54:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  58:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  5c:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  60:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>
  64:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 03       	mulsu	r16, r17
  6c:	80 01       	movw	r16, r0
  6e:	03 01       	movw	r0, r6
  70:	0d 00       	.word	0x000d	; ????
  72:	07 d2       	rcall	.+1038   	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
  c0:	0c 94 a8 03 	jmp	0x750	; 0x750 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000007c4 <__bad_interrupt>:
 7c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Change_Code:

000006b8 <Change_Code>:

uint8_t lock_code;
uint8_t *code_address;

void Change_Code (uint8_t *code, uint8_t **address)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	ec 01       	movw	r28, r24
	*address = *address+1;
 6be:	fb 01       	movw	r30, r22
 6c0:	80 81       	ld	r24, Z
 6c2:	91 81       	ldd	r25, Z+1	; 0x01
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	91 83       	std	Z+1, r25	; 0x01
 6c8:	80 83       	st	Z, r24
	*code = eeprom_read_byte(*address);
 6ca:	bc 01       	movw	r22, r24
 6cc:	80 e8       	ldi	r24, 0x80	; 128
 6ce:	0e 94 b3 03 	call	0x766	; 0x766 <eeprom_read_byte>
 6d2:	88 83       	st	Y, r24
}
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	08 95       	ret

Disassembly of section .text.flashled:

00000538 <flashled>:

void flashled(uint8_t lednum) {
	setbit(LED_PORT,lednum);
 538:	4b b1       	in	r20, 0x0b	; 11
 53a:	21 e0       	ldi	r18, 0x01	; 1
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <flashled+0xe>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <flashled+0xa>
 54a:	cb 01       	movw	r24, r22
 54c:	46 2b       	or	r20, r22
 54e:	4b b9       	out	0x0b, r20	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	7f ef       	ldi	r23, 0xFF	; 255
 552:	24 e3       	ldi	r18, 0x34	; 52
 554:	3c e0       	ldi	r19, 0x0C	; 12
 556:	71 50       	subi	r23, 0x01	; 1
 558:	20 40       	sbci	r18, 0x00	; 0
 55a:	30 40       	sbci	r19, 0x00	; 0
 55c:	e1 f7       	brne	.-8      	; 0x556 <flashled+0x1e>
 55e:	00 c0       	rjmp	.+0      	; 0x560 <flashled+0x28>
 560:	00 00       	nop
	_delay_ms(500);
	clearbit(LED_PORT,lednum);
 562:	2b b1       	in	r18, 0x0b	; 11
 564:	98 2f       	mov	r25, r24
 566:	90 95       	com	r25
 568:	29 23       	and	r18, r25
 56a:	2b b9       	out	0x0b, r18	; 11
 56c:	4f ef       	ldi	r20, 0xFF	; 255
 56e:	64 e3       	ldi	r22, 0x34	; 52
 570:	7c e0       	ldi	r23, 0x0C	; 12
 572:	41 50       	subi	r20, 0x01	; 1
 574:	60 40       	sbci	r22, 0x00	; 0
 576:	70 40       	sbci	r23, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <flashled+0x3a>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <flashled+0x44>
 57c:	00 00       	nop
	_delay_ms(500);
	setbit(LED_PORT,lednum);
 57e:	2b b1       	in	r18, 0x0b	; 11
 580:	82 2b       	or	r24, r18
 582:	8b b9       	out	0x0b, r24	; 11
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	24 e3       	ldi	r18, 0x34	; 52
 588:	3c e0       	ldi	r19, 0x0C	; 12
 58a:	81 50       	subi	r24, 0x01	; 1
 58c:	20 40       	sbci	r18, 0x00	; 0
 58e:	30 40       	sbci	r19, 0x00	; 0
 590:	e1 f7       	brne	.-8      	; 0x58a <flashled+0x52>
 592:	00 c0       	rjmp	.+0      	; 0x594 <flashled+0x5c>
 594:	00 00       	nop
	_delay_ms(500);
	clearbit(LED_PORT,lednum);
 596:	8b b1       	in	r24, 0x0b	; 11
 598:	98 23       	and	r25, r24
 59a:	9b b9       	out	0x0b, r25	; 11
 59c:	08 95       	ret

Disassembly of section .text.turn_on_led:

00000724 <turn_on_led>:
}

void turn_on_led (uint8_t lednum) {
	setbit(LED_PORT,lednum);
 724:	9b b1       	in	r25, 0x0b	; 11
 726:	21 e0       	ldi	r18, 0x01	; 1
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <turn_on_led+0xc>
 72c:	22 0f       	add	r18, r18
 72e:	33 1f       	adc	r19, r19
 730:	8a 95       	dec	r24
 732:	e2 f7       	brpl	.-8      	; 0x72c <turn_on_led+0x8>
 734:	29 2b       	or	r18, r25
 736:	2b b9       	out	0x0b, r18	; 11
 738:	08 95       	ret

Disassembly of section .text.turn_off_led:

000006f4 <turn_off_led>:
}

void turn_off_led (uint8_t lednum) {
	clearbit(LED_PORT,lednum);
 6f4:	9b b1       	in	r25, 0x0b	; 11
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <turn_off_led+0xc>
 6fc:	22 0f       	add	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	8a 95       	dec	r24
 702:	e2 f7       	brpl	.-8      	; 0x6fc <turn_off_led+0x8>
 704:	20 95       	com	r18
 706:	29 23       	and	r18, r25
 708:	2b b9       	out	0x0b, r18	; 11
 70a:	08 95       	ret

Disassembly of section .text.Init_MainSwitch:

00000778 <Init_MainSwitch>:
}

void Init_MainSwitch (void) {
	clearbit(SWITCH_DATA, SWITCH);
 778:	8a b1       	in	r24, 0x0a	; 10
 77a:	8f 7b       	andi	r24, 0xBF	; 191
 77c:	8a b9       	out	0x0a, r24	; 10
	setbit(SWITCH_PORT, SWITCH);
 77e:	8b b1       	in	r24, 0x0b	; 11
 780:	80 64       	ori	r24, 0x40	; 64
 782:	8b b9       	out	0x0b, r24	; 11
 784:	08 95       	ret

Disassembly of section .text.Sampling_MainSwitch:

00000786 <Sampling_MainSwitch>:
}

uint8_t Sampling_MainSwitch (void) {
	if (SWITCH_PIN & 1<<SWITCH) {
 786:	99 b1       	in	r25, 0x09	; 9
 788:	89 2f       	mov	r24, r25
 78a:	80 74       	andi	r24, 0x40	; 64
 78c:	96 fd       	sbrc	r25, 6
		return 1;
 78e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else return 0;
}
 790:	08 95       	ret

Disassembly of section .text.Init_LED:

0000073a <Init_LED>:

void Init_LED (uint8_t led_num) {
	setbit(LED_DATA,led_num);
 73a:	9a b1       	in	r25, 0x0a	; 10
 73c:	21 e0       	ldi	r18, 0x01	; 1
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	02 c0       	rjmp	.+4      	; 0x746 <Init_LED+0xc>
 742:	22 0f       	add	r18, r18
 744:	33 1f       	adc	r19, r19
 746:	8a 95       	dec	r24
 748:	e2 f7       	brpl	.-8      	; 0x742 <Init_LED+0x8>
 74a:	29 2b       	or	r18, r25
 74c:	2a b9       	out	0x0a, r18	; 10
 74e:	08 95       	ret

Disassembly of section .text.Locked_state_handle:

000005fc <Locked_state_handle>:
}

void Locked_state_handle (uint8_t *STATE) {
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
 600:	ec 01       	movw	r28, r24
	uint8_t message;
	while (1)
	{
		if (nrf24_RX_data_available())
 602:	0e 94 c9 03 	call	0x792	; 0x792 <nrf24_RX_data_available>
 606:	88 23       	and	r24, r24
 608:	e1 f3       	breq	.-8      	; 0x602 <Locked_state_handle+0x6>
		{
			message = nrf24_read_message();
 60a:	0e 94 27 03 	call	0x64e	; 0x64e <nrf24_read_message>
			if (message == LOCATE_VEHICLE)
 60e:	8e 3f       	cpi	r24, 0xFE	; 254
 610:	21 f4       	brne	.+8      	; 0x61a <Locked_state_handle+0x1e>
			{
				flashled(LOCATE_LED);
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	0e 94 9c 02 	call	0x538	; 0x538 <flashled>
 618:	f4 cf       	rjmp	.-24     	; 0x602 <Locked_state_handle+0x6>
			}
			else if (message == lock_code)
 61a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <lock_code>
 61e:	89 13       	cpse	r24, r25
 620:	f0 cf       	rjmp	.-32     	; 0x602 <Locked_state_handle+0x6>
 622:	8f e6       	ldi	r24, 0x6F	; 111
 624:	97 e1       	ldi	r25, 0x17	; 23
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <Locked_state_handle+0x2a>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <Locked_state_handle+0x30>
 62c:	00 00       	nop
			{
				_delay_ms(3);
				nrf24_send_message(HANDSHAKE_VEHICLE);
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <nrf24_send_message>
				nrf24_start_listening();
 634:	0e 94 6d 03 	call	0x6da	; 0x6da <nrf24_start_listening>
				*STATE = UNLOCK;
 638:	81 e0       	ldi	r24, 0x01	; 1
 63a:	88 83       	st	Y, r24
				Change_Code(&lock_code, &code_address);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	71 e0       	ldi	r23, 0x01	; 1
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	91 e0       	ldi	r25, 0x01	; 1
 644:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Change_Code>
				return;
			}
			message = 0;
		}
	}
}
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

Disassembly of section .text.Unlock_state_handle:

00000310 <Unlock_state_handle>:

void Unlock_state_handle (uint8_t *STATE) {
 310:	cf 92       	push	r12
 312:	df 92       	push	r13
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	6c 01       	movw	r12, r24
	uint8_t message;
	uint8_t MainSwitch = 0;
	uint8_t power;
	uint8_t lock_request = 0;
	uint16_t handshake_countdown = HANDSHAKE_TIMEOUT;
 320:	00 e0       	ldi	r16, 0x00	; 0
 322:	1d e7       	ldi	r17, 0x7D	; 125

void Unlock_state_handle (uint8_t *STATE) {
	uint8_t message;
	uint8_t MainSwitch = 0;
	uint8_t power;
	uint8_t lock_request = 0;
 324:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t handshake_countdown = HANDSHAKE_TIMEOUT;
	while (1) 
	{
		MainSwitch = Sampling_MainSwitch();
 326:	0e 94 c3 03 	call	0x786	; 0x786 <Sampling_MainSwitch>
 32a:	c8 2f       	mov	r28, r24
		if(MainSwitch == 1)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	21 f4       	brne	.+8      	; 0x338 <Unlock_state_handle+0x28>
		{
			turn_on_led(ENGINE_LED);
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	0e 94 92 03 	call	0x724	; 0x724 <turn_on_led>
 336:	03 c0       	rjmp	.+6      	; 0x33e <Unlock_state_handle+0x2e>
		}
		else turn_off_led(ENGINE_LED);
 338:	84 e0       	ldi	r24, 0x04	; 4
 33a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_off_led>
		
		if (nrf24_RX_data_available())
 33e:	0e 94 c9 03 	call	0x792	; 0x792 <nrf24_RX_data_available>
 342:	88 23       	and	r24, r24
 344:	b9 f1       	breq	.+110    	; 0x3b4 <Unlock_state_handle+0xa4>
		 {
			message = nrf24_read_message();
 346:	0e 94 27 03 	call	0x64e	; 0x64e <nrf24_read_message>
 34a:	f8 2e       	mov	r15, r24
			power = nrf24_RX_power();
 34c:	0e 94 4a 03 	call	0x694	; 0x694 <nrf24_RX_power>
			if (power == 1) 
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	91 f5       	brne	.+100    	; 0x3b8 <Unlock_state_handle+0xa8>
			{
				if (message == HANDSHAKE_VEHICLE)
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	f8 12       	cpse	r15, r24
 358:	1a c0       	rjmp	.+52     	; 0x38e <Unlock_state_handle+0x7e>
 35a:	ef e6       	ldi	r30, 0x6F	; 111
 35c:	f7 e1       	ldi	r31, 0x17	; 23
 35e:	31 97       	sbiw	r30, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <Unlock_state_handle+0x4e>
 362:	00 c0       	rjmp	.+0      	; 0x364 <Unlock_state_handle+0x54>
 364:	00 00       	nop
				{
					_delay_ms(3);
					nrf24_send_message(HANDSHAKE_VEHICLE);
 366:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <nrf24_send_message>
					nrf24_start_listening();
 36a:	0e 94 6d 03 	call	0x6da	; 0x6da <nrf24_start_listening>
					lock_request = 0;
					handshake_countdown = HANDSHAKE_TIMEOUT;
					turn_off_led(LOCK_LED);
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_off_led>
 374:	8f e1       	ldi	r24, 0x1F	; 31
 376:	9e e4       	ldi	r25, 0x4E	; 78
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <Unlock_state_handle+0x68>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <Unlock_state_handle+0x6e>
 37e:	00 00       	nop
					_delay_ms(10);
					turn_on_led(LOCK_LED);
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 92 03 	call	0x724	; 0x724 <turn_on_led>
				{
					_delay_ms(3);
					nrf24_send_message(HANDSHAKE_VEHICLE);
					nrf24_start_listening();
					lock_request = 0;
					handshake_countdown = HANDSHAKE_TIMEOUT;
 386:	00 e0       	ldi	r16, 0x00	; 0
 388:	1d e7       	ldi	r17, 0x7D	; 125
				if (message == HANDSHAKE_VEHICLE)
				{
					_delay_ms(3);
					nrf24_send_message(HANDSHAKE_VEHICLE);
					nrf24_start_listening();
					lock_request = 0;
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	15 c0       	rjmp	.+42     	; 0x3b8 <Unlock_state_handle+0xa8>
					handshake_countdown = HANDSHAKE_TIMEOUT;
					turn_off_led(LOCK_LED);
					_delay_ms(10);
					turn_on_led(LOCK_LED);
				}
				else if ((message == lock_code) && (MainSwitch == 0))
 38e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lock_code>
 392:	f8 12       	cpse	r15, r24
 394:	11 c0       	rjmp	.+34     	; 0x3b8 <Unlock_state_handle+0xa8>
 396:	c1 11       	cpse	r28, r1
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <Unlock_state_handle+0xa8>
 39a:	ef e6       	ldi	r30, 0x6F	; 111
 39c:	f7 e1       	ldi	r31, 0x17	; 23
 39e:	31 97       	sbiw	r30, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <Unlock_state_handle+0x8e>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <Unlock_state_handle+0x94>
 3a4:	00 00       	nop
				{
					_delay_ms(3);
					nrf24_send_message(HANDSHAKE_VEHICLE);
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <nrf24_send_message>
					nrf24_start_listening();
 3ac:	0e 94 6d 03 	call	0x6da	; 0x6da <nrf24_start_listening>
					lock_request = 1;
 3b0:	d1 e0       	ldi	r29, 0x01	; 1
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <Unlock_state_handle+0xa8>
				message = 0;
			}
		}
		else
		{
			handshake_countdown = handshake_countdown - 1;
 3b4:	01 50       	subi	r16, 0x01	; 1
 3b6:	11 09       	sbc	r17, r1
		}
		if (handshake_countdown == 0) {
 3b8:	01 15       	cp	r16, r1
 3ba:	11 05       	cpc	r17, r1
 3bc:	09 f4       	brne	.+2      	; 0x3c0 <Unlock_state_handle+0xb0>
			lock_request = 1;
 3be:	d1 e0       	ldi	r29, 0x01	; 1
		}
		
		if (lock_request == 1)
 3c0:	d1 30       	cpi	r29, 0x01	; 1
 3c2:	59 f4       	brne	.+22     	; 0x3da <Unlock_state_handle+0xca>
		{
			if(MainSwitch == 0) 
 3c4:	c1 11       	cpse	r28, r1
 3c6:	09 c0       	rjmp	.+18     	; 0x3da <Unlock_state_handle+0xca>
			{
				*STATE = LOCKED;
 3c8:	f6 01       	movw	r30, r12
 3ca:	10 82       	st	Z, r1
				Change_Code(&lock_code, &code_address);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Change_Code>
				return;
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <Unlock_state_handle+0xd8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	8b e2       	ldi	r24, 0x2B	; 43
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	01 97       	sbiw	r24, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <Unlock_state_handle+0xce>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Unlock_state_handle+0xd4>
 3e4:	00 00       	nop
 3e6:	9f cf       	rjmp	.-194    	; 0x326 <Unlock_state_handle+0x16>
			}
		}
		_delay_us(150);
	}
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	df 90       	pop	r13
 3f4:	cf 90       	pop	r12
 3f6:	08 95       	ret

Disassembly of section .text.main:

000004c4 <main>:
int main(void)
{
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	0f 92       	push	r0
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
	uint8_t STATE = LOCKED;
 4ce:	19 82       	std	Y+1, r1	; 0x01
	cli();
 4d0:	f8 94       	cli
	Init_SPI();
 4d2:	0e 94 cf 03 	call	0x79e	; 0x79e <Init_SPI>
	Init_MainSwitch();
 4d6:	0e 94 bc 03 	call	0x778	; 0x778 <Init_MainSwitch>
	Init_LED(LOCATE_LED);
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	0e 94 9d 03 	call	0x73a	; 0x73a <Init_LED>
	Init_LED(LOCK_LED);
 4e0:	83 e0       	ldi	r24, 0x03	; 3
 4e2:	0e 94 9d 03 	call	0x73a	; 0x73a <Init_LED>
	Init_LED(ENGINE_LED);
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	0e 94 9d 03 	call	0x73a	; 0x73a <Init_LED>
	Init_RF();
 4ec:	0e 94 64 00 	call	0xc8	; 0xc8 <__data_load_end>
	lock_code = 0;
 4f0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <lock_code>
	code_address = 0;
 4f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	Change_Code(&lock_code, &code_address);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	71 e0       	ldi	r23, 0x01	; 1
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <Change_Code>
	nrf24_state(POWERUP);
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 09 01 	call	0x212	; 0x212 <nrf24_state>
	nrf24_start_listening();
 50e:	0e 94 6d 03 	call	0x6da	; 0x6da <nrf24_start_listening>
	while(1) 
	{
		if (STATE == LOCKED) 
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	81 11       	cpse	r24, r1
 516:	08 c0       	rjmp	.+16     	; 0x528 <main+0x64>
		{
			turn_off_led(LOCK_LED);
 518:	83 e0       	ldi	r24, 0x03	; 3
 51a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <turn_off_led>
			Locked_state_handle(&STATE);
 51e:	ce 01       	movw	r24, r28
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Locked_state_handle>
 526:	f5 cf       	rjmp	.-22     	; 0x512 <main+0x4e>
		}
		else
		{
			turn_on_led(LOCK_LED);
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	0e 94 92 03 	call	0x724	; 0x724 <turn_on_led>
			Unlock_state_handle(&STATE);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 88 01 	call	0x310	; 0x310 <Unlock_state_handle>
 536:	ed cf       	rjmp	.-38     	; 0x512 <main+0x4e>

Disassembly of section .text.nrf24_send_spi:

0000059e <nrf24_send_spi>:
#define STANDBY2	6

// Used to store SPI commands

uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
 59e:	bf 92       	push	r11
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	6b 01       	movw	r12, r22
 5b2:	7a 01       	movw	r14, r20
	uint8_t status;
	clearbit(RF_PORT,SS);
 5b4:	95 b1       	in	r25, 0x05	; 5
 5b6:	9b 7f       	andi	r25, 0xFB	; 251
 5b8:	95 b9       	out	0x05, r25	; 5
	status = SPI_MasterTransmit(register_address);
 5ba:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPI_MasterTransmit>
 5be:	b8 2e       	mov	r11, r24
	for (unsigned int i = 0; i < bytes; i++)
 5c0:	c0 e0       	ldi	r28, 0x00	; 0
 5c2:	d0 e0       	ldi	r29, 0x00	; 0
 5c4:	0a c0       	rjmp	.+20     	; 0x5da <nrf24_send_spi+0x3c>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
 5c6:	86 01       	movw	r16, r12
 5c8:	0c 0f       	add	r16, r28
 5ca:	1d 1f       	adc	r17, r29
 5cc:	f8 01       	movw	r30, r16
 5ce:	80 81       	ld	r24, Z
 5d0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPI_MasterTransmit>
 5d4:	f8 01       	movw	r30, r16
 5d6:	80 83       	st	Z, r24
uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
	uint8_t status;
	clearbit(RF_PORT,SS);
	status = SPI_MasterTransmit(register_address);
	for (unsigned int i = 0; i < bytes; i++)
 5d8:	21 96       	adiw	r28, 0x01	; 1
 5da:	ce 15       	cp	r28, r14
 5dc:	df 05       	cpc	r29, r15
 5de:	98 f3       	brcs	.-26     	; 0x5c6 <nrf24_send_spi+0x28>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
	setbit(RF_PORT,SS);
 5e0:	85 b1       	in	r24, 0x05	; 5
 5e2:	84 60       	ori	r24, 0x04	; 4
 5e4:	85 b9       	out	0x05, r24	; 5
	return status;
}
 5e6:	8b 2d       	mov	r24, r11
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	08 95       	ret

Disassembly of section .text.nrf24_write:

000007b6 <nrf24_write>:

uint8_t nrf24_write(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(W_REGISTER | register_address, data, bytes);
 7b6:	80 62       	ori	r24, 0x20	; 32
 7b8:	0e 94 cf 02 	call	0x59e	; 0x59e <nrf24_send_spi>
}
 7bc:	08 95       	ret

Disassembly of section .text.nrf24_read:

000007be <nrf24_read>:

uint8_t nrf24_read(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(R_REGISTER | register_address, data, bytes);
 7be:	0e 94 cf 02 	call	0x59e	; 0x59e <nrf24_send_spi>
}
 7c2:	08 95       	ret

Disassembly of section .text.Init_RF_Port:

0000070c <Init_RF_Port>:

void Init_RF_Port(void)
{
	//setup port
	DDRB |= (1<<SS)|(1<<CE);
 70c:	84 b1       	in	r24, 0x04	; 4
 70e:	85 60       	ori	r24, 0x05	; 5
 710:	84 b9       	out	0x04, r24	; 4
	clearbit(DDRB,IQR);
 712:	84 b1       	in	r24, 0x04	; 4
 714:	8d 7f       	andi	r24, 0xFD	; 253
 716:	84 b9       	out	0x04, r24	; 4
	clearbit(PORTB,CE);
 718:	85 b1       	in	r24, 0x05	; 5
 71a:	8e 7f       	andi	r24, 0xFE	; 254
 71c:	85 b9       	out	0x05, r24	; 5
	RF_PORT = (1<<IQR)|(1<<SS);
 71e:	86 e0       	ldi	r24, 0x06	; 6
 720:	85 b9       	out	0x05, r24	; 5
 722:	08 95       	ret

Disassembly of section .text.Init_RF:

000000c8 <Init_RF>:
}

void Init_RF (void)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	0f 92       	push	r0
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	Init_RF_Port();
  d6:	0e 94 86 03 	call	0x70c	; 0x70c <Init_RF_Port>
	
	setbit(RF_PORT,SS);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	85 b9       	out	0x05, r24	; 5
	clearbit(RF_PORT,CE);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <Init_RF+0x24>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <Init_RF+0x2e>
  f6:	00 00       	nop
	_delay_ms(100);		//startup wait
	
	//activate reg
	data = 0x73;
  f8:	83 e7       	ldi	r24, 0x73	; 115
  fa:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(ACTIVATE,&data,1);
  fc:	41 e0       	ldi	r20, 0x01	; 1
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	be 01       	movw	r22, r28
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	80 e5       	ldi	r24, 0x50	; 80
 108:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Start nRF24L01+ config
	data =
 10c:	89 e3       	ldi	r24, 0x39	; 57
 10e:	89 83       	std	Y+1, r24	; 0x01
	(!(RT_INTERRUPT) << MASK_MAX_RT) |	// IRQ interrupt on auto retransmit counter overflow (0 = enabled)
	(1 << EN_CRC) |						// CRC enable
	(0 << CRC0) |						// CRC scheme
	(0 << PWR_UP) |						// Power up
	(1 << PRIM_RX);						// RX select at start
	nrf24_write(CONFIG,&data,1);
 110:	41 e0       	ldi	r20, 0x01	; 1
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	be 01       	movw	r22, r28
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Auto-acknowledge on all pipes
	data =
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	89 83       	std	Y+1, r24	; 0x01
	(AUTO_ACK << ENAA_P4) |
	(AUTO_ACK << ENAA_P3) |
	(AUTO_ACK << ENAA_P2) |
	(AUTO_ACK << ENAA_P1) |
	(AUTO_ACK << ENAA_P0);
	nrf24_write(EN_AA,&data,1);
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	be 01       	movw	r22, r28
 12a:	6f 5f       	subi	r22, 0xFF	; 255
 12c:	7f 4f       	sbci	r23, 0xFF	; 255
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Set retries
	data = 0x0A;				// Delay 250us with 5 re-try (will be added in settings)
 134:	8a e0       	ldi	r24, 0x0A	; 10
 136:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(SETUP_RETR,&data,1);
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	be 01       	movw	r22, r28
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7f 4f       	sbci	r23, 0xFF	; 255
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Disable RX addresses
	data = 0;
 148:	19 82       	std	Y+1, r1	; 0x01
	nrf24_write(EN_RXADDR, &data, 1);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Set channel
	data = CHANNEL;
 15a:	16 e0       	ldi	r17, 0x06	; 6
 15c:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(RF_CH,&data,1);
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	be 01       	movw	r22, r28
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Setup
	data =
 16e:	19 83       	std	Y+1, r17	; 0x01
	(0 << CONT_WAVE) |					// Continuous carrier transmit
	(DATARATE) |	// Data rate
	(POWER);				// PA level
	nrf24_write(RF_SETUP,&data,1);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	be 01       	movw	r22, r28
 176:	6f 5f       	subi	r22, 0xFF	; 255
 178:	7f 4f       	sbci	r23, 0xFF	; 255
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Status - clear TX/RX FIFO's and MAX_RT by writing 1 into them
	data =
 180:	00 e7       	ldi	r16, 0x70	; 112
 182:	09 83       	std	Y+1, r16	; 0x01
	(1 << RX_DR) |								// RX FIFO
	(1 << TX_DS) |								// TX FIFO
	(1 << MAX_RT);								// MAX RT
	nrf24_write(STATUS,&data,1);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	be 01       	movw	r22, r28
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	//specify data length
	data = DATA_LENGTH;
 194:	11 e0       	ldi	r17, 0x01	; 1
 196:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(RX_PW_P0,&data,1);
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	6f 5f       	subi	r22, 0xFF	; 255
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	81 e1       	ldi	r24, 0x11	; 17
 1a4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	//specify address length
	data = ADDR_LENGTH;
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(SETUP_AW,&data,1);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	be 01       	movw	r22, r28
 1b2:	6f 5f       	subi	r22, 0xFF	; 255
 1b4:	7f 4f       	sbci	r23, 0xFF	; 255
 1b6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Flush TX/RX
	// Clear RX FIFO which will reset interrupt
	data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 1ba:	09 83       	std	Y+1, r16	; 0x01
	nrf24_write(FLUSH_RX,0,0);
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	82 ee       	ldi	r24, 0xE2	; 226
 1c6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	81 ee       	ldi	r24, 0xE1	; 225
 1d4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Open pipes
	nrf24_write(RX_ADDR_P0 + READ_PIPE,rx_address,5);
 1d8:	45 e0       	ldi	r20, 0x05	; 5
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	68 e0       	ldi	r22, 0x08	; 8
 1de:	71 e0       	ldi	r23, 0x01	; 1
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	nrf24_write(TX_ADDR,tx_address,5);
 1e6:	45 e0       	ldi	r20, 0x05	; 5
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	71 e0       	ldi	r23, 0x01	; 1
 1ee:	80 e1       	ldi	r24, 0x10	; 16
 1f0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	data = (1 << READ_PIPE);
 1f4:	19 83       	std	Y+1, r17	; 0x01
	nrf24_write(EN_RXADDR,&data,1);
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	be 01       	movw	r22, r28
 1fc:	6f 5f       	subi	r22, 0xFF	; 255
 1fe:	7f 4f       	sbci	r23, 0xFF	; 255
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	return;
}
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

Disassembly of section .text.nrf24_RX_data_available:

00000792 <nrf24_RX_data_available>:

uint8_t nrf24_RX_data_available(void)
{
	if ((RF_PIN & 1<<IQR) == 0) return 1;
 792:	19 99       	sbic	0x03, 1	; 3
 794:	02 c0       	rjmp	.+4      	; 0x79a <nrf24_RX_data_available+0x8>
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	08 95       	ret
	return 0;
 79a:	80 e0       	ldi	r24, 0x00	; 0
}
 79c:	08 95       	ret

Disassembly of section .text.nrf24_state:

00000212 <nrf24_state>:

void nrf24_state(uint8_t state)
{
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	00 d0       	rcall	.+0      	; 0x21a <nrf24_state+0x8>
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	18 2f       	mov	r17, r24
	uint8_t data;
	uint8_t config_register;
	nrf24_read(CONFIG,&config_register,1);
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	be 01       	movw	r22, r28
 226:	6e 5f       	subi	r22, 0xFE	; 254
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 df 03 	call	0x7be	; 0x7be <nrf24_read>
	
	switch (state)
 230:	13 30       	cpi	r17, 0x03	; 3
 232:	71 f1       	breq	.+92     	; 0x290 <nrf24_state+0x7e>
 234:	28 f4       	brcc	.+10     	; 0x240 <nrf24_state+0x2e>
 236:	11 30       	cpi	r17, 0x01	; 1
 238:	59 f0       	breq	.+22     	; 0x250 <nrf24_state+0x3e>
 23a:	12 30       	cpi	r17, 0x02	; 2
 23c:	e9 f0       	breq	.+58     	; 0x278 <nrf24_state+0x66>
 23e:	62 c0       	rjmp	.+196    	; 0x304 <nrf24_state+0xf2>
 240:	15 30       	cpi	r17, 0x05	; 5
 242:	09 f4       	brne	.+2      	; 0x246 <nrf24_state+0x34>
 244:	47 c0       	rjmp	.+142    	; 0x2d4 <nrf24_state+0xc2>
 246:	d0 f1       	brcs	.+116    	; 0x2bc <nrf24_state+0xaa>
 248:	16 30       	cpi	r17, 0x06	; 6
 24a:	09 f4       	brne	.+2      	; 0x24e <nrf24_state+0x3c>
 24c:	47 c0       	rjmp	.+142    	; 0x2dc <nrf24_state+0xca>
 24e:	5a c0       	rjmp	.+180    	; 0x304 <nrf24_state+0xf2>
	{
		case POWERUP:
		// Check if already powered up
		if (!(config_register & (1 << PWR_UP)))
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	81 fd       	sbrc	r24, 1
 254:	57 c0       	rjmp	.+174    	; 0x304 <nrf24_state+0xf2>
		{
			data = config_register | (1 << PWR_UP);
 256:	82 60       	ori	r24, 0x02	; 2
 258:	89 83       	std	Y+1, r24	; 0x01
			nrf24_write(CONFIG,&data,1);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	be 01       	movw	r22, r28
 260:	6f 5f       	subi	r22, 0xFF	; 255
 262:	7f 4f       	sbci	r23, 0xFF	; 255
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
 26a:	8f e9       	ldi	r24, 0x9F	; 159
 26c:	9f e0       	ldi	r25, 0x0F	; 15
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <nrf24_state+0x5c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <nrf24_state+0x62>
 274:	00 00       	nop
 276:	46 c0       	rjmp	.+140    	; 0x304 <nrf24_state+0xf2>
			// 1.5ms from POWERDOWN to start up
			_delay_ms(2);
		}
		break;
		case POWERDOWN:
		data = config_register & ~(1 << PWR_UP);
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		break;
 28e:	3a c0       	rjmp	.+116    	; 0x304 <nrf24_state+0xf2>
		case RECEIVE:
		data = config_register | (1 << PRIM_RX);
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	81 60       	ori	r24, 0x01	; 1
 294:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	be 01       	movw	r22, r28
 29c:	6f 5f       	subi	r22, 0xFF	; 255
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		// Clear STATUS register
		data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
 2a6:	80 e7       	ldi	r24, 0x70	; 112
 2a8:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(STATUS,&data,1);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	be 01       	movw	r22, r28
 2b0:	6f 5f       	subi	r22, 0xFF	; 255
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		break;
 2ba:	24 c0       	rjmp	.+72     	; 0x304 <nrf24_state+0xf2>
		case TRANSMIT:
		data = config_register & ~(1 << PRIM_RX);
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	be 01       	movw	r22, r28
 2c8:	6f 5f       	subi	r22, 0xFF	; 255
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		break;
 2d2:	18 c0       	rjmp	.+48     	; 0x304 <nrf24_state+0xf2>
		case STANDBY1:
		clearbit(RF_PORT,CE);
 2d4:	85 b1       	in	r24, 0x05	; 5
 2d6:	8e 7f       	andi	r24, 0xFE	; 254
 2d8:	85 b9       	out	0x05, r24	; 5
		break;
 2da:	14 c0       	rjmp	.+40     	; 0x304 <nrf24_state+0xf2>
		case STANDBY2:
		data = config_register & ~(1 << PRIM_RX);
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(CONFIG,&data,1);
 2e2:	41 e0       	ldi	r20, 0x01	; 1
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	be 01       	movw	r22, r28
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		setbit(RF_PORT,CE);
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f8:	8b e2       	ldi	r24, 0x2B	; 43
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <nrf24_state+0xea>
 300:	00 c0       	rjmp	.+0      	; 0x302 <nrf24_state+0xf0>
 302:	00 00       	nop
		_delay_us(150);
		break;
	}
}
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

Disassembly of section .text.nrf24_start_listening:

000006da <nrf24_start_listening>:

void nrf24_start_listening(void)
{
	nrf24_state(RECEIVE);				// Receive mode
 6da:	83 e0       	ldi	r24, 0x03	; 3
 6dc:	0e 94 09 01 	call	0x212	; 0x212 <nrf24_state>
	setbit(RF_PORT,CE);
 6e0:	85 b1       	in	r24, 0x05	; 5
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	85 b9       	out	0x05, r24	; 5
 6e6:	8b e2       	ldi	r24, 0x2B	; 43
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <nrf24_start_listening+0x10>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <nrf24_start_listening+0x16>
 6f0:	00 00       	nop
 6f2:	08 95       	ret

Disassembly of section .text.nrf24_send_message:

000003f8 <nrf24_send_message>:
	_delay_us(150);						// Settling time
}

uint8_t nrf24_send_message(uint8_t message)
{
 3f8:	0f 93       	push	r16
 3fa:	1f 93       	push	r17
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	0f 92       	push	r0
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	18 2f       	mov	r17, r24
	clearbit(RF_PORT,CE);
 408:	85 b1       	in	r24, 0x05	; 5
 40a:	8e 7f       	andi	r24, 0xFE	; 254
 40c:	85 b9       	out	0x05, r24	; 5
	uint8_t data;
	// Flush TX/RX and clear TX interrupt
	nrf24_write(FLUSH_RX,0,0);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	82 ee       	ldi	r24, 0xE2	; 226
 418:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	nrf24_write(FLUSH_TX,0,0);
 41c:	40 e0       	ldi	r20, 0x00	; 0
 41e:	50 e0       	ldi	r21, 0x00	; 0
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	81 ee       	ldi	r24, 0xE1	; 225
 426:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	data = (1 << TX_DS)|(1<<MAX_RT);
 42a:	80 e3       	ldi	r24, 0x30	; 48
 42c:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	be 01       	movw	r22, r28
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	87 e0       	ldi	r24, 0x07	; 7
 43a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	
	// Start SPI, load message into TX_PAYLOAD
	clearbit(RF_PORT,SS);
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	8b 7f       	andi	r24, 0xFB	; 251
 442:	85 b9       	out	0x05, r24	; 5
	if (AUTO_ACK) SPI_MasterTransmit(W_TX_PAYLOAD);
 444:	80 ea       	ldi	r24, 0xA0	; 160
 446:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPI_MasterTransmit>
	else SPI_MasterTransmit(W_TX_PAYLOAD_NOACK);
	SPI_MasterTransmit(message);
 44a:	81 2f       	mov	r24, r17
 44c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <SPI_MasterTransmit>
	setbit(RF_PORT,SS);
 450:	85 b1       	in	r24, 0x05	; 5
 452:	84 60       	ori	r24, 0x04	; 4
 454:	85 b9       	out	0x05, r24	; 5
	
	// Transmit mode
	nrf24_state(TRANSMIT);
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	0e 94 09 01 	call	0x212	; 0x212 <nrf24_state>
	
	// Send message by pulling CE high for more than 10us
	setbit(RF_PORT,CE);
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	85 b9       	out	0x05, r24	; 5
 462:	85 e3       	ldi	r24, 0x35	; 53
 464:	8a 95       	dec	r24
 466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 468:	00 00       	nop
	_delay_us(20);
	clearbit(RF_PORT,CE);
 46a:	85 b1       	in	r24, 0x05	; 5
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	85 b9       	out	0x05, r24	; 5
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
	uint8_t finish_send = 0;
 470:	10 e0       	ldi	r17, 0x00	; 0
	setbit(RF_PORT,CE);
	_delay_us(20);
	clearbit(RF_PORT,CE);
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
 472:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t finish_send = 0;
	while(finish_send == 0)
 474:	14 c0       	rjmp	.+40     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	{
		nrf24_read(STATUS,&data,1);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	be 01       	movw	r22, r28
 47c:	6f 5f       	subi	r22, 0xFF	; 255
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	87 e0       	ldi	r24, 0x07	; 7
 482:	0e 94 df 03 	call	0x7be	; 0x7be <nrf24_read>
		if (data & (1 << TX_DS)) {
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	85 fd       	sbrc	r24, 5
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			SEND_SUSCESS = 1;
			finish_send = 1;
		}
			
		else if (data & (1 << MAX_RT)) {
 48c:	84 ff       	sbrs	r24, 4
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
			SEND_SUSCESS = 0;
			finish_send = 1;
 490:	11 e0       	ldi	r17, 0x01	; 1
			SEND_SUSCESS = 1;
			finish_send = 1;
		}
			
		else if (data & (1 << MAX_RT)) {
			SEND_SUSCESS = 0;
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	04 c0       	rjmp	.+8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
	while(finish_send == 0)
	{
		nrf24_read(STATUS,&data,1);
		if (data & (1 << TX_DS)) {
			SEND_SUSCESS = 1;
			finish_send = 1;
 496:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t finish_send = 0;
	while(finish_send == 0)
	{
		nrf24_read(STATUS,&data,1);
		if (data & (1 << TX_DS)) {
			SEND_SUSCESS = 1;
 498:	01 e0       	ldi	r16, 0x01	; 1
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		else if (data & (1 << MAX_RT)) {
			SEND_SUSCESS = 0;
			finish_send = 1;
		}
		else {
			SEND_SUSCESS = 0;
 49c:	00 e0       	ldi	r16, 0x00	; 0
	clearbit(RF_PORT,CE);
	
	// Wait for message to be sent (TX_DS flag raised)
	uint8_t SEND_SUSCESS = 0;
	uint8_t finish_send = 0;
	while(finish_send == 0)
 49e:	11 23       	and	r17, r17
 4a0:	51 f3       	breq	.-44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
			finish_send = 0;
		}
	}
	
	//Clear TX interrupt
	data = (1 << TX_DS)|(1<<MAX_RT);
 4a2:	80 e3       	ldi	r24, 0x30	; 48
 4a4:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 4a6:	41 e0       	ldi	r20, 0x01	; 1
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	be 01       	movw	r22, r28
 4ac:	6f 5f       	subi	r22, 0xFF	; 255
 4ae:	7f 4f       	sbci	r23, 0xFF	; 255
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
		
	return SEND_SUSCESS;

}
 4b6:	80 2f       	mov	r24, r16
 4b8:	0f 90       	pop	r0
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	08 95       	ret

Disassembly of section .text.nrf24_read_message:

0000064e <nrf24_read_message>:

uint8_t nrf24_read_message()
{
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	00 d0       	rcall	.+0      	; 0x654 <nrf24_read_message+0x6>
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	uint8_t rx_message;
	// Read message
	clearbit(RF_PORT,CE);
 658:	85 b1       	in	r24, 0x05	; 5
 65a:	8e 7f       	andi	r24, 0xFE	; 254
 65c:	85 b9       	out	0x05, r24	; 5
	nrf24_send_spi(R_RX_PAYLOAD,&rx_message,1);
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	be 01       	movw	r22, r28
 664:	6e 5f       	subi	r22, 0xFE	; 254
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	81 e6       	ldi	r24, 0x61	; 97
 66a:	0e 94 cf 02 	call	0x59e	; 0x59e <nrf24_send_spi>
	data = (1 << RX_DR);
 66e:	80 e4       	ldi	r24, 0x40	; 64
 670:	89 83       	std	Y+1, r24	; 0x01
	nrf24_write(STATUS,&data,1);
 672:	41 e0       	ldi	r20, 0x01	; 1
 674:	50 e0       	ldi	r21, 0x00	; 0
 676:	be 01       	movw	r22, r28
 678:	6f 5f       	subi	r22, 0xFF	; 255
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	87 e0       	ldi	r24, 0x07	; 7
 67e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <nrf24_write>
	//nrf24_write(FLUSH_RX,0,0);
	setbit(RF_PORT,CE);
 682:	85 b1       	in	r24, 0x05	; 5
 684:	81 60       	ori	r24, 0x01	; 1
 686:	85 b9       	out	0x05, r24	; 5
	return rx_message;
}
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	08 95       	ret

Disassembly of section .text.nrf24_RX_power:

00000694 <nrf24_RX_power>:

uint8_t nrf24_RX_power() 
{
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	0f 92       	push	r0
 69a:	cd b7       	in	r28, 0x3d	; 61
 69c:	de b7       	in	r29, 0x3e	; 62
	uint8_t data; 
	nrf24_read(RPD, &data, 1);
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	be 01       	movw	r22, r28
 6a4:	6f 5f       	subi	r22, 0xFF	; 255
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	89 e0       	ldi	r24, 0x09	; 9
 6aa:	0e 94 df 03 	call	0x7be	; 0x7be <nrf24_read>
	return data;
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
 6b0:	0f 90       	pop	r0
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

Disassembly of section .text.Init_SPI:

0000079e <Init_SPI>:
#define MOSI 3
#define MISO 4
#define SCK 5
void Init_SPI (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK); //SCK, MOSI as output
 79e:	84 b1       	in	r24, 0x04	; 4
 7a0:	88 62       	ori	r24, 0x28	; 40
 7a2:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fclk/2 = 4MHz
 7a4:	81 e5       	ldi	r24, 0x51	; 81
 7a6:	8c bd       	out	0x2c, r24	; 44
 7a8:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000007aa <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t transmit_data)
{
	SPDR = transmit_data;
 7aa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) {}
 7ac:	0d b4       	in	r0, 0x2d	; 45
 7ae:	07 fe       	sbrs	r0, 7
 7b0:	fd cf       	rjmp	.-6      	; 0x7ac <SPI_MasterTransmit+0x2>
	return SPDR;	//take receive data
 7b2:	8e b5       	in	r24, 0x2e	; 46
 7b4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000007cc <_fini>:
 7cc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007ce <__funcs_on_exit>:
 7ce:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007d0 <__simulator_exit>:
 7d0:	08 95       	ret

Disassembly of section .text.exit:

00000750 <exit>:
 750:	ec 01       	movw	r28, r24
 752:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__funcs_on_exit>
 756:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_fini>
 75a:	ce 01       	movw	r24, r28
 75c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__simulator_exit>
 760:	ce 01       	movw	r24, r28
 762:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_Exit>

Disassembly of section .text._Exit:

000007c8 <_Exit>:
 7c8:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>

Disassembly of section .text.avrlibc:

00000766 <eeprom_read_byte>:
 766:	cb 01       	movw	r24, r22
 768:	f9 99       	sbic	0x1f, 1	; 31
 76a:	fe cf       	rjmp	.-4      	; 0x768 <eeprom_read_byte+0x2>
 76c:	92 bd       	out	0x22, r25	; 34
 76e:	81 bd       	out	0x21, r24	; 33
 770:	f8 9a       	sbi	0x1f, 0	; 31
 772:	99 27       	eor	r25, r25
 774:	80 b5       	in	r24, 0x20	; 32
 776:	08 95       	ret
