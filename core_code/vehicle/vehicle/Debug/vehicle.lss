
vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004e4  00000578  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000005a7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a9a  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009a5  00000000  00000000  00002107  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000792  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00003240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a5  00000000  00000000  000033f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e4  00000000  00000000  0000369d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000004cc  000004cc  00000560  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.flashled 00000050  000003d4  000003d4  00000468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000003a  00000424  00000424  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.nrf24_send_spi 0000005e  00000376  00000376  0000040a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.nrf24_write 00000008  000004be  000004be  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.nrf24_read 00000006  000004c6  000004c6  0000055a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Init_RF_Port 00000018  00000478  00000478  0000050c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.Init_RF 0000014a  000000c4  000000c4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.nrf24_state 000000fe  0000020e  0000020e  000002a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.nrf24_start_listening 0000001a  0000045e  0000045e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.nrf24_read_message 0000006a  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .data.tx_address 00000005  00800100  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data.rx_address 00000005  00800105  000004df  00000573  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .text.Init_SPI 0000000c  000004a6  000004a6  0000053a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.SPI_MasterTransmit 0000000c  000004b2  000004b2  00000546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  000004d4  000004d4  00000568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  000004d6  000004d6  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  000004d8  000004d8  0000056c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000490  00000490  00000524  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  000004d0  000004d0  00000564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
   8:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
   c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  10:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  14:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  18:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  1c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  20:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  24:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  28:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  2c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  30:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  34:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  38:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  3c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  40:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  44:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  48:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  4c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  50:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  54:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  58:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  5c:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  60:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>
  64:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	00 04       	cpc	r0, r0
  6e:	da 00       	.word	0x00da	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 12 02 	call	0x424	; 0x424 <main>
  bc:	0c 94 48 02 	jmp	0x490	; 0x490 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

000004cc <__bad_interrupt>:
 4cc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.flashled:

000003d4 <flashled>:

#define LED 2
#define LED_PORT PORTD

void flashled(void) {
	LED_PORT = LED_PORT | (1<<LED);
 3d4:	8b b1       	in	r24, 0x0b	; 11
 3d6:	84 60       	ori	r24, 0x04	; 4
 3d8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	84 e3       	ldi	r24, 0x34	; 52
 3de:	9c e0       	ldi	r25, 0x0C	; 12
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <flashled+0xc>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <flashled+0x16>
 3ea:	00 00       	nop
	_delay_ms(500);
	LED_PORT = LED_PORT & ~(1<<LED);
 3ec:	8b b1       	in	r24, 0x0b	; 11
 3ee:	8b 7f       	andi	r24, 0xFB	; 251
 3f0:	8b b9       	out	0x0b, r24	; 11
 3f2:	2f ef       	ldi	r18, 0xFF	; 255
 3f4:	84 e3       	ldi	r24, 0x34	; 52
 3f6:	9c e0       	ldi	r25, 0x0C	; 12
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	e1 f7       	brne	.-8      	; 0x3f8 <flashled+0x24>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
	_delay_ms(500);
	LED_PORT = LED_PORT | (1<<LED);
 404:	8b b1       	in	r24, 0x0b	; 11
 406:	84 60       	ori	r24, 0x04	; 4
 408:	8b b9       	out	0x0b, r24	; 11
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	84 e3       	ldi	r24, 0x34	; 52
 40e:	9c e0       	ldi	r25, 0x0C	; 12
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(500);
	LED_PORT = LED_PORT & ~(1<<LED);
 41c:	8b b1       	in	r24, 0x0b	; 11
 41e:	8b 7f       	andi	r24, 0xFB	; 251
 420:	8b b9       	out	0x0b, r24	; 11
 422:	08 95       	ret

Disassembly of section .text.main:

00000424 <main>:


int main(void)
{
	uint8_t message;
	cli();
 424:	f8 94       	cli
	Init_SPI();
 426:	0e 94 53 02 	call	0x4a6	; 0x4a6 <Init_SPI>
	DDRD |= 1<<LED; 
 42a:	8a b1       	in	r24, 0x0a	; 10
 42c:	84 60       	ori	r24, 0x04	; 4
 42e:	8a b9       	out	0x0a, r24	; 10
	Init_RF();
 430:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	nrf24_state(POWERUP);
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 07 01 	call	0x20e	; 0x20e <nrf24_state>
	nrf24_start_listening();
 43a:	0e 94 2f 02 	call	0x45e	; 0x45e <nrf24_start_listening>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	80 e7       	ldi	r24, 0x70	; 112
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x20>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <main+0x2a>
 44e:	00 00       	nop
	while(1) 
	{
		_delay_ms(100);
		message = nrf24_read_message();
 450:	0e 94 86 01 	call	0x30c	; 0x30c <nrf24_read_message>
		if (message==0xA5) {
 454:	85 3a       	cpi	r24, 0xA5	; 165
 456:	99 f7       	brne	.-26     	; 0x43e <main+0x1a>
			flashled();
 458:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <flashled>
 45c:	f0 cf       	rjmp	.-32     	; 0x43e <main+0x1a>

Disassembly of section .text.nrf24_send_spi:

00000376 <nrf24_send_spi>:
#define STANDBY2	6

// Used to store SPI commands

uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	6b 01       	movw	r12, r22
 38a:	7a 01       	movw	r14, r20
	uint8_t status;
	clearbit(RF_PORT,SS);
 38c:	95 b1       	in	r25, 0x05	; 5
 38e:	9b 7f       	andi	r25, 0xFB	; 251
 390:	95 b9       	out	0x05, r25	; 5
	status = SPI_MasterTransmit(register_address);
 392:	0e 94 59 02 	call	0x4b2	; 0x4b2 <SPI_MasterTransmit>
 396:	b8 2e       	mov	r11, r24
	for (unsigned int i = 0; i < bytes; i++)
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d0 e0       	ldi	r29, 0x00	; 0
 39c:	0a c0       	rjmp	.+20     	; 0x3b2 <nrf24_send_spi+0x3c>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
 39e:	86 01       	movw	r16, r12
 3a0:	0c 0f       	add	r16, r28
 3a2:	1d 1f       	adc	r17, r29
 3a4:	f8 01       	movw	r30, r16
 3a6:	80 81       	ld	r24, Z
 3a8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <SPI_MasterTransmit>
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 83       	st	Z, r24
uint8_t nrf24_send_spi(uint8_t register_address, void *data, unsigned int bytes)
{
	uint8_t status;
	clearbit(RF_PORT,SS);
	status = SPI_MasterTransmit(register_address);
	for (unsigned int i = 0; i < bytes; i++)
 3b0:	21 96       	adiw	r28, 0x01	; 1
 3b2:	ce 15       	cp	r28, r14
 3b4:	df 05       	cpc	r29, r15
 3b6:	98 f3       	brcs	.-26     	; 0x39e <nrf24_send_spi+0x28>
	((uint8_t*)data)[i] = SPI_MasterTransmit(((uint8_t*)data)[i]);
	setbit(RF_PORT,SS);
 3b8:	85 b1       	in	r24, 0x05	; 5
 3ba:	84 60       	ori	r24, 0x04	; 4
 3bc:	85 b9       	out	0x05, r24	; 5
	return status;
}
 3be:	8b 2d       	mov	r24, r11
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	bf 90       	pop	r11
 3d2:	08 95       	ret

Disassembly of section .text.nrf24_write:

000004be <nrf24_write>:

uint8_t nrf24_write(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(W_REGISTER | register_address, data, bytes);
 4be:	80 62       	ori	r24, 0x20	; 32
 4c0:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_send_spi>
}
 4c4:	08 95       	ret

Disassembly of section .text.nrf24_read:

000004c6 <nrf24_read>:

uint8_t nrf24_read(uint8_t register_address, uint8_t *data, unsigned int bytes)
{
	return nrf24_send_spi(R_REGISTER | register_address, data, bytes);
 4c6:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_send_spi>
}
 4ca:	08 95       	ret

Disassembly of section .text.Init_RF_Port:

00000478 <Init_RF_Port>:

void Init_RF_Port(void)
{
	//setup port
	DDRB |= (1<<SS)|(1<<CE);
 478:	84 b1       	in	r24, 0x04	; 4
 47a:	85 60       	ori	r24, 0x05	; 5
 47c:	84 b9       	out	0x04, r24	; 4
	clearbit(DDRB,IQR);
 47e:	84 b1       	in	r24, 0x04	; 4
 480:	8d 7f       	andi	r24, 0xFD	; 253
 482:	84 b9       	out	0x04, r24	; 4
	clearbit(PORTB,CE);
 484:	85 b1       	in	r24, 0x05	; 5
 486:	8e 7f       	andi	r24, 0xFE	; 254
 488:	85 b9       	out	0x05, r24	; 5
	RF_PORT = (1<<IQR)|(1<<SS);
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	85 b9       	out	0x05, r24	; 5
 48e:	08 95       	ret

Disassembly of section .text.Init_RF:

000000c4 <Init_RF>:
	nrf24_read(CONFIG,&data,1);
	data &= ~(1 << MASK_RX_DR);
	nrf24_write(CONFIG,&data,1);
	
	return 1;
}
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	0f 92       	push	r0
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	0e 94 3c 02 	call	0x478	; 0x478 <Init_RF_Port>
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	85 b9       	out	0x05, r24	; 5
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <Init_RF+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Init_RF+0x2e>
  f2:	00 00       	nop
  f4:	83 e7       	ldi	r24, 0x73	; 115
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	41 e0       	ldi	r20, 0x01	; 1
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	be 01       	movw	r22, r28
  fe:	6f 5f       	subi	r22, 0xFF	; 255
 100:	7f 4f       	sbci	r23, 0xFF	; 255
 102:	80 e5       	ldi	r24, 0x50	; 80
 104:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 108:	89 e3       	ldi	r24, 0x39	; 57
 10a:	89 83       	std	Y+1, r24	; 0x01
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	be 01       	movw	r22, r28
 112:	6f 5f       	subi	r22, 0xFF	; 255
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	89 83       	std	Y+1, r24	; 0x01
 120:	41 e0       	ldi	r20, 0x01	; 1
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	be 01       	movw	r22, r28
 126:	6f 5f       	subi	r22, 0xFF	; 255
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 130:	8a e0       	ldi	r24, 0x0A	; 10
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	be 01       	movw	r22, r28
 13a:	6f 5f       	subi	r22, 0xFF	; 255
 13c:	7f 4f       	sbci	r23, 0xFF	; 255
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 144:	19 82       	std	Y+1, r1	; 0x01
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	be 01       	movw	r22, r28
 14c:	6f 5f       	subi	r22, 0xFF	; 255
 14e:	7f 4f       	sbci	r23, 0xFF	; 255
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 156:	16 e0       	ldi	r17, 0x06	; 6
 158:	19 83       	std	Y+1, r17	; 0x01
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	85 e0       	ldi	r24, 0x05	; 5
 166:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 16a:	19 83       	std	Y+1, r17	; 0x01
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	be 01       	movw	r22, r28
 172:	6f 5f       	subi	r22, 0xFF	; 255
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 17c:	00 e7       	ldi	r16, 0x70	; 112
 17e:	09 83       	std	Y+1, r16	; 0x01
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 190:	11 e0       	ldi	r17, 0x01	; 1
 192:	19 83       	std	Y+1, r17	; 0x01
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	be 01       	movw	r22, r28
 19a:	6f 5f       	subi	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	81 e1       	ldi	r24, 0x11	; 17
 1a0:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	be 01       	movw	r22, r28
 1ae:	6f 5f       	subi	r22, 0xFF	; 255
 1b0:	7f 4f       	sbci	r23, 0xFF	; 255
 1b2:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1b6:	09 83       	std	Y+1, r16	; 0x01
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	82 ee       	ldi	r24, 0xE2	; 226
 1c2:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	81 ee       	ldi	r24, 0xE1	; 225
 1d0:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1d4:	45 e0       	ldi	r20, 0x05	; 5
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1e2:	45 e0       	ldi	r20, 0x05	; 5
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	71 e0       	ldi	r23, 0x01	; 1
 1ea:	80 e1       	ldi	r24, 0x10	; 16
 1ec:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 1f0:	19 83       	std	Y+1, r17	; 0x01
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	be 01       	movw	r22, r28
 1f8:	6f 5f       	subi	r22, 0xFF	; 255
 1fa:	7f 4f       	sbci	r23, 0xFF	; 255
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 202:	0f 90       	pop	r0
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

Disassembly of section .text.nrf24_state:

0000020e <nrf24_state>:
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	00 d0       	rcall	.+0      	; 0x216 <nrf24_state+0x8>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	18 2f       	mov	r17, r24
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	be 01       	movw	r22, r28
 222:	6e 5f       	subi	r22, 0xFE	; 254
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_read>
 22c:	13 30       	cpi	r17, 0x03	; 3
 22e:	71 f1       	breq	.+92     	; 0x28c <nrf24_state+0x7e>
 230:	28 f4       	brcc	.+10     	; 0x23c <nrf24_state+0x2e>
 232:	11 30       	cpi	r17, 0x01	; 1
 234:	59 f0       	breq	.+22     	; 0x24c <nrf24_state+0x3e>
 236:	12 30       	cpi	r17, 0x02	; 2
 238:	e9 f0       	breq	.+58     	; 0x274 <nrf24_state+0x66>
 23a:	62 c0       	rjmp	.+196    	; 0x300 <nrf24_state+0xf2>
 23c:	15 30       	cpi	r17, 0x05	; 5
 23e:	09 f4       	brne	.+2      	; 0x242 <nrf24_state+0x34>
 240:	47 c0       	rjmp	.+142    	; 0x2d0 <nrf24_state+0xc2>
 242:	d0 f1       	brcs	.+116    	; 0x2b8 <nrf24_state+0xaa>
 244:	16 30       	cpi	r17, 0x06	; 6
 246:	09 f4       	brne	.+2      	; 0x24a <nrf24_state+0x3c>
 248:	47 c0       	rjmp	.+142    	; 0x2d8 <nrf24_state+0xca>
 24a:	5a c0       	rjmp	.+180    	; 0x300 <nrf24_state+0xf2>
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	81 fd       	sbrc	r24, 1
 250:	57 c0       	rjmp	.+174    	; 0x300 <nrf24_state+0xf2>
 252:	82 60       	ori	r24, 0x02	; 2
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	be 01       	movw	r22, r28
 25c:	6f 5f       	subi	r22, 0xFF	; 255
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <nrf24_state+0x5c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <nrf24_state+0x62>
 270:	00 00       	nop
 272:	46 c0       	rjmp	.+140    	; 0x300 <nrf24_state+0xf2>
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	8d 7f       	andi	r24, 0xFD	; 253
 278:	89 83       	std	Y+1, r24	; 0x01
 27a:	41 e0       	ldi	r20, 0x01	; 1
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 28a:	3a c0       	rjmp	.+116    	; 0x300 <nrf24_state+0xf2>
 28c:	8a 81       	ldd	r24, Y+2	; 0x02
 28e:	81 60       	ori	r24, 0x01	; 1
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	be 01       	movw	r22, r28
 298:	6f 5f       	subi	r22, 0xFF	; 255
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 2a2:	80 e7       	ldi	r24, 0x70	; 112
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	be 01       	movw	r22, r28
 2ac:	6f 5f       	subi	r22, 0xFF	; 255
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	87 e0       	ldi	r24, 0x07	; 7
 2b2:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 2b6:	24 c0       	rjmp	.+72     	; 0x300 <nrf24_state+0xf2>
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	89 83       	std	Y+1, r24	; 0x01
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	50 e0       	ldi	r21, 0x00	; 0
 2c2:	be 01       	movw	r22, r28
 2c4:	6f 5f       	subi	r22, 0xFF	; 255
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 2ce:	18 c0       	rjmp	.+48     	; 0x300 <nrf24_state+0xf2>
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	8e 7f       	andi	r24, 0xFE	; 254
 2d4:	85 b9       	out	0x05, r24	; 5
 2d6:	14 c0       	rjmp	.+40     	; 0x300 <nrf24_state+0xf2>
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	8e 7f       	andi	r24, 0xFE	; 254
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	be 01       	movw	r22, r28
 2e4:	6f 5f       	subi	r22, 0xFF	; 255
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	8b e2       	ldi	r24, 0x2B	; 43
 2f6:	91 e0       	ldi	r25, 0x01	; 1
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <nrf24_state+0xea>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <nrf24_state+0xf0>
 2fe:	00 00       	nop
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	08 95       	ret

Disassembly of section .text.nrf24_start_listening:

0000045e <nrf24_start_listening>:
	}
}

void nrf24_start_listening(void)
{
	nrf24_state(RECEIVE);				// Receive mode
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 07 01 	call	0x20e	; 0x20e <nrf24_state>
	//if (AUTO_ACK) nrf24_write_ack();	// Write acknowledgment
	setbit(RF_PORT,CE);
 464:	85 b1       	in	r24, 0x05	; 5
 466:	81 60       	ori	r24, 0x01	; 1
 468:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	8b e2       	ldi	r24, 0x2B	; 43
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <nrf24_start_listening+0x10>
 472:	00 c0       	rjmp	.+0      	; 0x474 <nrf24_start_listening+0x16>
 474:	00 00       	nop
 476:	08 95       	ret

Disassembly of section .text.nrf24_read_message:

0000030c <nrf24_read_message>:
	
	return 1;
}

uint8_t nrf24_read_message()
{
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <nrf24_read_message+0x6>
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	uint8_t rx_message;
	// Get length of incoming message
	nrf24_read(R_RX_PL_WID,&data,1);
 316:	41 e0       	ldi	r20, 0x01	; 1
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	be 01       	movw	r22, r28
 31c:	6f 5f       	subi	r22, 0xFF	; 255
 31e:	7f 4f       	sbci	r23, 0xFF	; 255
 320:	80 e6       	ldi	r24, 0x60	; 96
 322:	0e 94 63 02 	call	0x4c6	; 0x4c6 <nrf24_read>
	
	// Read message
	if (data > 0) {
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	88 23       	and	r24, r24
 32a:	01 f1       	breq	.+64     	; 0x36c <nrf24_read_message+0x60>
		clearbit(RF_PORT,CE);
 32c:	85 b1       	in	r24, 0x05	; 5
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	85 b9       	out	0x05, r24	; 5
		nrf24_send_spi(R_RX_PAYLOAD,&rx_message,2);
 332:	42 e0       	ldi	r20, 0x02	; 2
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	be 01       	movw	r22, r28
 338:	6e 5f       	subi	r22, 0xFE	; 254
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	81 e6       	ldi	r24, 0x61	; 97
 33e:	0e 94 bb 01 	call	0x376	; 0x376 <nrf24_send_spi>
		data = (1 << RX_DR);
 342:	80 e4       	ldi	r24, 0x40	; 64
 344:	89 83       	std	Y+1, r24	; 0x01
		nrf24_write(STATUS,&data,1);
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	be 01       	movw	r22, r28
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	87 e0       	ldi	r24, 0x07	; 7
 352:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
		nrf24_write(FLUSH_RX,0,0);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	82 ee       	ldi	r24, 0xE2	; 226
 360:	0e 94 5f 02 	call	0x4be	; 0x4be <nrf24_write>
		setbit(RF_PORT,CE);
 364:	85 b1       	in	r24, 0x05	; 5
 366:	81 60       	ori	r24, 0x01	; 1
 368:	85 b9       	out	0x05, r24	; 5
		return rx_message;
 36a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	else {
		return 0;
	}
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

Disassembly of section .text.Init_SPI:

000004a6 <Init_SPI>:
#define MOSI 3
#define MISO 4
#define SCK 5
void Init_SPI (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK); //SCK, MOSI as output
 4a6:	84 b1       	in	r24, 0x04	; 4
 4a8:	88 62       	ori	r24, 0x28	; 40
 4aa:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPI2X); //Enable SPI, Master, set clock rate fclk/2 = 4MHz
 4ac:	81 e5       	ldi	r24, 0x51	; 81
 4ae:	8c bd       	out	0x2c, r24	; 44
 4b0:	08 95       	ret

Disassembly of section .text.SPI_MasterTransmit:

000004b2 <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t transmit_data)
{
	SPDR = transmit_data;
 4b2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) {}
 4b4:	0d b4       	in	r0, 0x2d	; 45
 4b6:	07 fe       	sbrs	r0, 7
 4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <SPI_MasterTransmit+0x2>
	return SPDR;	//take receive data
 4ba:	8e b5       	in	r24, 0x2e	; 46
 4bc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000004d4 <_fini>:
 4d4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000004d6 <__funcs_on_exit>:
 4d6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000004d8 <__simulator_exit>:
 4d8:	08 95       	ret

Disassembly of section .text.exit:

00000490 <exit>:
 490:	ec 01       	movw	r28, r24
 492:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__funcs_on_exit>
 496:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_fini>
 49a:	ce 01       	movw	r24, r28
 49c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__simulator_exit>
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Exit>

Disassembly of section .text._Exit:

000004d0 <_Exit>:
 4d0:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
